<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="72:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x40cb19b8"/></to>
    </wire>
    <wire loc="73:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x40cac4c0"/></to>
    </wire>
    <wire loc="61:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40c6e398"/></to>
    </wire>
    <wire loc="59:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b74980"/></to>
    </wire>
    <wire loc="53:/home/user/tinyos-main/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40a32188"/></to>
    </wire>
    <wire loc="11:testECDSA.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405b1ef8"/></to>
    </wire>
    <wire loc="12:testECDSA.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x40408dd0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x403fe2a0"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x403fe2a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x404f71c8"/></to>
    </wire>
    <wire loc="16:testECDSA.nc">
      <from><interface-ref name="myTimer" scoped="" ref="0x4053a770"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40a1d660"/></to>
    </wire>
    <wire loc="52:/home/user/tinyos-main/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40a1d660"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40a3a850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="17:testECDSA.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x405447f0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x40b312f0"/></to>
    </wire>
    <wire loc="26:/home/user/tinyos-main/tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x40b312f0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x40a30cd8"/></to>
    </wire>
    <wire loc="18:testECDSA.nc">
      <from><interface-ref name="Random" scoped="" ref="0x40538d08"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x405d6280"/></to>
    </wire>
    <wire loc="19:testECDSA.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4054a298"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x403ebc48"/></to>
    </wire>
    <wire loc="51:/home/user/tinyos-main/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x403ebc48"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405bd358"/></to>
    </wire>
    <wire loc="23:testECDSA.nc">
      <from><interface-ref name="PubKeyMsg" scoped="" ref="0x40588d38"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40b33ee0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="24:testECDSA.nc">
      <from><interface-ref name="PriKeyMsg" scoped="" ref="0x405414b0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40b33ee0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="25:testECDSA.nc">
      <from><interface-ref name="PacketMsg" scoped="" ref="0x40541c08"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40b33ee0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="26:testECDSA.nc">
      <from><interface-ref name="TimeMsg" scoped="" ref="0x405493b8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40b33ee0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:testECDSA.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40583bb0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40b33608"/></to>
    </wire>
    <wire loc="61:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40b33608"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40b74d18"/></to>
    </wire>
    <wire loc="29:testECDSA.nc">
      <from><interface-ref name="NN" scoped="" ref="0x404fc010"/></from>
      <to><interface-ref name="NN" scoped="" ref="0x405e0a00"/></to>
    </wire>
    <wire loc="30:testECDSA.nc">
      <from><interface-ref name="ECC" scoped="" ref="0x40528010"/></from>
      <to><interface-ref name="ECC" scoped="" ref="0x405d8c28"/></to>
    </wire>
    <wire loc="47:ECCC.nc">
      <from><interface-ref name="ECC" scoped="" ref="0x405d8c28"/></from>
      <to><interface-ref name="ECC" scoped="" ref="0x407463c0"/></to>
    </wire>
    <wire loc="31:testECDSA.nc">
      <from><interface-ref name="ECDSA" scoped="" ref="0x405326d0"/></from>
      <to><interface-ref name="ECDSA" scoped="" ref="0x4099cdd8"/></to>
    </wire>
    <wire loc="44:ECDSAC.nc">
      <from><interface-ref name="ECDSA" scoped="" ref="0x4099cdd8"/></from>
      <to><interface-ref name="ECDSA" scoped="" ref="0x40999b08"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x404f7560"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x40352ed8"/></to>
    </wire>
    <wire loc="53:/home/user/tinyos-main/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x40352ed8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x403cd4f8"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x404f7b28"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404070b0"/></to>
    </wire>
    <wire loc="58:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x404070b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40406b98"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x404f6010"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></to>
    </wire>
    <wire loc="26:/home/user/tinyos-main/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x404060f8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40d672b0"/></to>
    </wire>
    <wire loc="59:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x4040d968"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x404e5c08"/></to>
    </wire>
    <wire loc="61:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x4040b418"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404e5858"/></to>
    </wire>
    <wire loc="54:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4040b010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405cac88"/></to>
    </wire>
    <wire loc="62:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4040b010"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x40405410"/></to>
    </wire>
    <wire loc="46:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x40405410"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4040f3d0"/></to>
    </wire>
    <wire loc="63:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x404057e0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x404060f8"/></to>
    </wire>
    <wire loc="48:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x404159e8"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x4041aea8"/></to>
    </wire>
    <wire loc="141:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x4041aea8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x404646b0"/></to>
    </wire>
    <wire loc="49:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x404184a8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x404057e0"/></to>
    </wire>
    <wire loc="191:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x40438210"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404beee0"/></to>
    </wire>
    <wire loc="165:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x40429750"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x404804f0"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x404804f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e4fde0"/></to>
    </wire>
    <wire loc="176:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x4042dce8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4048e030"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x4048e030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40eacc08"/></to>
    </wire>
    <wire loc="185:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x40432ea8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40493890"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x40493890"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40edc7f8"/></to>
    </wire>
    <wire loc="143:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x404222f0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4046d988"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x4046d988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40dc89e8"/></to>
    </wire>
    <wire loc="183:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x40433a98"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x404945d0"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x404945d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40edf3b0"/></to>
    </wire>
    <wire loc="146:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x40421750"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40469888"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40469888"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40dfa938"/></to>
    </wire>
    <wire loc="157:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x40424ea8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404734f0"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x404734f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e219e8"/></to>
    </wire>
    <wire loc="168:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x40431670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x4047e170"/></to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x4047e170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e4ac08"/></to>
    </wire>
    <wire loc="179:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x40435c08"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4048dc88"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x4048dc88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ea7a88"/></to>
    </wire>
    <wire loc="138:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x4041b010"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40467968"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40467968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d9d6c0"/></to>
    </wire>
    <wire loc="149:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x4041f670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x404715d0"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x404715d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40df57f8"/></to>
    </wire>
    <wire loc="160:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x4042cce8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4047b170"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x4047b170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e1c9e8"/></to>
    </wire>
    <wire loc="171:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x4042f4b0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4047de48"/></to>
    </wire>
    <wire loc="73:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4047de48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e76a88"/></to>
    </wire>
    <wire loc="188:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x4043ace8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x404915d0"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x404915d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ed66c0"/></to>
    </wire>
    <wire loc="194:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x404402f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404c2dd8"/></to>
    </wire>
    <wire loc="174:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x4042e8e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40485d30"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40485d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40eaf7f8"/></to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x404646b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40dcb538"/></to>
    </wire>
    <wire loc="152:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x40427590"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4046f250"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x4046f250"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40df06c0"/></to>
    </wire>
    <wire loc="192:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x40438e08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404bb3e8"/></to>
    </wire>
    <wire loc="155:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x40425a08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40474228"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40474228"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e24538"/></to>
    </wire>
    <wire loc="166:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x40428210"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40480e48"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x40480e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e4d7f8"/></to>
    </wire>
    <wire loc="177:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x40436750"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x4048e988"/></to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x4048e988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40eaa6c0"/></to>
    </wire>
    <wire loc="186:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x4043b8e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40492250"/></to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x40492250"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ed9228"/></to>
    </wire>
    <wire loc="144:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x40422ce8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4046c330"/></to>
    </wire>
    <wire loc="73:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4046c330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40dc6538"/></to>
    </wire>
    <wire loc="147:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x40420210"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40472250"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40472250"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40df83b0"/></to>
    </wire>
    <wire loc="158:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x404238e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40473e48"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x40473e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e1f538"/></to>
    </wire>
    <wire loc="169:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x404300a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4047eac8"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x4047eac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e7a6c0"/></to>
    </wire>
    <wire loc="180:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x40434670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4048c6b0"/></to>
    </wire>
    <wire loc="73:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4048c6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ea5538"/></to>
    </wire>
    <wire loc="139:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x4041ba08"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40465330"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x40465330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40dce0b0"/></to>
    </wire>
    <wire loc="150:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x4041e0a0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40471f28"/></to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x40471f28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40df3228"/></to>
    </wire>
    <wire loc="161:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x4042b750"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4047bac8"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x4047bac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e1a538"/></to>
    </wire>
    <wire loc="189:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x40439750"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40491f28"/></to>
    </wire>
    <wire loc="73:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x40491f28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ed40b0"/></to>
    </wire>
    <wire loc="164:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x4042ac08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40481b00"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40481b00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e50418"/></to>
    </wire>
    <wire loc="175:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x4042d2f0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404836b0"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x404836b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ead228"/></to>
    </wire>
    <wire loc="184:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x404324b0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40494f28"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x40494f28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40eded70"/></to>
    </wire>
    <wire loc="195:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x40440ce8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404bf3b0"/></to>
    </wire>
    <wire loc="142:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x404198e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4046d030"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x4046d030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40dc9010"/></to>
    </wire>
    <wire loc="153:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x40425010"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4046fba8"/></to>
    </wire>
    <wire loc="73:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4046fba8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ded0b0"/></to>
    </wire>
    <wire loc="182:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x404330a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40489c28"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40489c28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ee1938"/></to>
    </wire>
    <wire loc="156:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x404244b0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40474b80"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40474b80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e22010"/></to>
    </wire>
    <wire loc="167:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x40428c08"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4047f7d0"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x4047f7d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e4b228"/></to>
    </wire>
    <wire loc="178:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x40435210"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4048d330"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x4048d330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ea80b0"/></to>
    </wire>
    <wire loc="187:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x4043a2f0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40492ba8"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x40492ba8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ed8c08"/></to>
    </wire>
    <wire loc="137:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x40411550"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40467010"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40467010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d9fbb0"/></to>
    </wire>
    <wire loc="148:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x40420c08"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40472ba8"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x40472ba8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40df7d70"/></to>
    </wire>
    <wire loc="159:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x4042c2f0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x4047c7d0"/></to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x4047c7d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e1d010"/></to>
    </wire>
    <wire loc="170:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x40430a98"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4047d4f0"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x4047d4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e770b0"/></to>
    </wire>
    <wire loc="193:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x40437830"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404b98f0"/></to>
    </wire>
    <wire loc="173:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x4042fea8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x404853d8"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x404853d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e80de8"/></to>
    </wire>
    <wire loc="162:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x4042a210"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4047a4f0"/></to>
    </wire>
    <wire loc="73:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4047a4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40e18010"/></to>
    </wire>
    <wire loc="140:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x4041a4b0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40465c88"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x40465c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40dcda88"/></to>
    </wire>
    <wire loc="151:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x4041eb18"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40470890"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x40470890"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40df2c08"/></to>
    </wire>
    <wire loc="54:/home/user/tinyos-main/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403cdd30"/></to>
    </wire>
    <wire loc="55:/home/user/tinyos-main/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x403cb9c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x403db438"/></to>
    </wire>
    <wire loc="58:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x403e0f18"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x40a987b8"/></to>
    </wire>
    <wire loc="53:/home/user/tinyos-main/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x405cac88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405bd010"/></to>
    </wire>
    <wire loc="54:/home/user/tinyos-main/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405bc030"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x405bfe50"/></to>
    </wire>
    <wire loc="56:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405bfe50"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x4041ba08"/></to>
    </wire>
    <wire loc="55:/home/user/tinyos-main/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x405bca18"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x405cb880"/></to>
    </wire>
    <wire loc="57:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x405cb880"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x4041b010"/></to>
    </wire>
    <wire loc="56:/home/user/tinyos-main/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x405bb4a0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x405ca300"/></to>
    </wire>
    <wire loc="58:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x405ca300"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x40411550"/></to>
    </wire>
    <wire loc="78:ECCC.nc">
      <from><interface-ref name="CurveParam" scoped="" ref="0x405d95d8"/></from>
      <to><interface-ref name="CurveParam" scoped="" ref="0x40855988"/></to>
    </wire>
    <wire loc="48:ECCC.nc">
      <from><interface-ref name="NN" scoped="" ref="0x40743748"/></from>
      <to><interface-ref name="NN" scoped="" ref="0x405e0a00"/></to>
    </wire>
    <wire loc="49:ECCC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x40740388"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x405d6280"/></to>
    </wire>
    <wire loc="77:ECCC.nc">
      <from><interface-ref name="CurveParam" scoped="" ref="0x40741f18"/></from>
      <to><interface-ref name="CurveParam" scoped="" ref="0x40855988"/></to>
    </wire>
    <wire loc="79:ECCC.nc">
      <from><interface-ref name="NN" scoped="" ref="0x40855db8"/></from>
      <to><interface-ref name="NN" scoped="" ref="0x405e0a00"/></to>
    </wire>
    <wire loc="45:ECDSAC.nc">
      <from><interface-ref name="ECC" scoped="" ref="0x409b46b0"/></from>
      <to><interface-ref name="ECC" scoped="" ref="0x405d8c28"/></to>
    </wire>
    <wire loc="46:ECDSAC.nc">
      <from><interface-ref name="NN" scoped="" ref="0x409b6040"/></from>
      <to><interface-ref name="NN" scoped="" ref="0x405e0a00"/></to>
    </wire>
    <wire loc="47:ECDSAC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x409b39f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x405d6280"/></to>
    </wire>
    <wire loc="48:ECDSAC.nc">
      <from><interface-ref name="SHA1" scoped="" ref="0x409af8d8"/></from>
      <to><interface-ref name="SHA1" scoped="" ref="0x409b7860"/></to>
    </wire>
    <wire loc="54:/home/user/tinyos-main/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40a3a850"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40a32938"/></to>
    </wire>
    <wire loc="61:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40a32938"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40af8a60"/></to>
    </wire>
    <wire loc="59:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40a32188"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40a2b3a8"/></to>
    </wire>
    <wire loc="65:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x40a30cd8"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x40b17460"/></to>
    </wire>
    <wire loc="35:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40a2b3a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40ad15a8"/></to>
    </wire>
    <wire loc="62:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x40b1de30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40a2ca88"/></to>
    </wire>
    <wire loc="63:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40adae50"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x40a48b10"/></to>
    </wire>
    <wire loc="36:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x40a48b10"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ad19e0"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40b17df8"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x40a42500"/></to>
    </wire>
    <wire loc="37:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x40a42500"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40acf5b8"/></to>
    </wire>
    <wire loc="37:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40acf5b8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40f3a150"/></to>
    </wire>
    <wire loc="35:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40ad15a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40f3c280"/></to>
    </wire>
    <wire loc="36:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40ad19e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40f3c6b8"/></to>
    </wire>
    <wire loc="39:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40f6e338"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40a82488"/></to>
    </wire>
    <wire loc="60:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40a82488"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40a9d010"/></to>
    </wire>
    <wire loc="40:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40f6c4e0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40a80760"/></to>
    </wire>
    <wire loc="61:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40a80760"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40a9a360"/></to>
    </wire>
    <wire loc="41:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40f6cd08"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40aa30f0"/></to>
    </wire>
    <wire loc="62:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40aa30f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40a9acc0"/></to>
    </wire>
    <wire loc="42:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x40f69730"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x40aa1c30"/></to>
    </wire>
    <wire loc="63:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x40aa1c30"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x40a98c18"/></to>
    </wire>
    <wire loc="74:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x40afb818"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x40b19050"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40b74d18"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40baade8"/></to>
    </wire>
    <wire loc="63:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40b33ee0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40b3ebe8"/></to>
    </wire>
    <wire loc="65:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40b49328"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40b76310"/></to>
    </wire>
    <wire loc="64:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40b2c330"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40b3b3a8"/></to>
    </wire>
    <wire loc="67:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40b3a308"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40b769a8"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40b40140"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40b3b6d0"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40b74980"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40baaa50"/></to>
    </wire>
    <wire loc="60:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40b92840"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40b3a840"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40b76ed0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40b71c20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40b755a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40b71618"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x40b92338"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x40d98d50"/></to>
    </wire>
    <wire loc="64:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40b71c20"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40c40a90"/></to>
    </wire>
    <wire loc="65:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40b71618"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40c406d0"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x40c3f238"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x40b92338"/></to>
    </wire>
    <wire loc="70:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40ba7260"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40b92840"/></to>
    </wire>
    <wire loc="71:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40c3e230"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40b92840"/></to>
    </wire>
    <wire loc="72:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40c62260"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40b92840"/></to>
    </wire>
    <wire loc="74:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40c3f720"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40ba2778"/></to>
    </wire>
    <wire loc="75:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x40c3fbf8"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x40ba45b8"/></to>
    </wire>
    <wire loc="77:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x40b9e970"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x40c3c6a8"/></to>
    </wire>
    <wire loc="78:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40b9cee0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40c77168"/></to>
    </wire>
    <wire loc="48:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40c77168"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40c73e88"/></to>
    </wire>
    <wire loc="80:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40c5c990"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40c775e8"/></to>
    </wire>
    <wire loc="49:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40c775e8"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40c72788"/></to>
    </wire>
    <wire loc="332:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x40be6e58"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x40bb4300"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x40bbf6a8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x40be3ac0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x40c3ee48"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x40c3d2b0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40c73488"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40c72308"/></to>
    </wire>
    <wire loc="51:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40c72308"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40c6eae8"/></to>
    </wire>
    <wire loc="52:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40c72788"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40c6ef00"/></to>
    </wire>
    <wire loc="50:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40c73e88"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40c6e6d0"/></to>
    </wire>
    <wire loc="53:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40c70218"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40cfaa18"/></to>
    </wire>
    <wire loc="33:/home/user/tinyos-main/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40cfaa18"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40d7c320"/></to>
    </wire>
    <wire loc="53:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40c9cc88"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40c70218"/></to>
    </wire>
    <wire loc="56:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x40c6d7b0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x40cb4688"/></to>
    </wire>
    <wire loc="60:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x40cb4688"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x40cb1e08"/></to>
    </wire>
    <wire loc="57:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x40c6dbe8"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x40cb4b98"/></to>
    </wire>
    <wire loc="61:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x40cb4b98"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x40cad368"/></to>
    </wire>
    <wire loc="58:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x40c9c050"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x40cb30b8"/></to>
    </wire>
    <wire loc="62:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x40cb30b8"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x40cad880"/></to>
    </wire>
    <wire loc="66:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x40cb2760"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x40cab390"/></to>
    </wire>
    <wire loc="64:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x40cb3cc8"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x40cac910"/></to>
    </wire>
    <wire loc="65:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x40cb2268"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x40cace40"/></to>
    </wire>
    <wire loc="68:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40caa010"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x4040d968"/></to>
    </wire>
    <wire loc="69:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40caa750"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x403e0148"/></to>
    </wire>
    <wire loc="34:/home/user/tinyos-main/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x40d7b5f8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40cf44d0"/></to>
    </wire>
    <wire loc="31:/home/user/tinyos-main/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40cf44d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40d80f10"/></to>
    </wire>
    <wire loc="32:/home/user/tinyos-main/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40d5b0e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40cf3df8"/></to>
    </wire>
    <wire loc="55:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40cf3df8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40d080e0"/></to>
    </wire>
    <wire loc="56:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40ce7e28"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40d053c8"/></to>
    </wire>
    <wire loc="57:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x40d0ec38"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x40d040f0"/></to>
    </wire>
    <wire loc="59:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40ce6e88"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x40d01010"/></to>
    </wire>
    <wire loc="60:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40ce6e88"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x40d00c08"/></to>
    </wire>
    <wire loc="61:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40ce6e88"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x40cfd830"/></to>
    </wire>
    <wire loc="27:/home/user/tinyos-main/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40d67698"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40cf3df8"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:/home/user/tinyos-main/tos/system/MainC.nc">
      <documentation loc="1:/home/user/tinyos-main/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:/home/user/tinyos-main/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/home/user/tinyos-main/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/home/user/tinyos-main/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/home/user/tinyos-main/tos/platforms/mica/MeasureClockC.nc" safe="">
      <documentation loc="14:/home/user/tinyos-main/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/home/user/tinyos-main/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/home/user/tinyos-main/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/home/user/tinyos-main/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/home/user/tinyos-main/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/home/user/tinyos-main/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="testECDSAM" loc="9:testECDSAM.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="45:/home/user/tinyos-main/tos/system/LedsC.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:/home/user/tinyos-main/tos/system/LedsP.nc" safe="">
      <documentation loc="35:/home/user/tinyos-main/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:/home/user/tinyos-main/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomLfsrC" loc="61:/home/user/tinyos-main/tos/system/RandomLfsrC.nc">
      <documentation loc="50:/home/user/tinyos-main/tos/system/RandomLfsrC.nc">
        <short>&#10; This is a 16 bit Linear Feedback Shift Register pseudo random number&#10;generator.</short>
        <long>&#10; This is a 16 bit Linear Feedback Shift Register pseudo random number&#10;generator. It is faster than the MLCG generator, but the numbers generated&#10; have less randomness.&#10;&#10; @author Alec Woo&#10; @author David Gay&#10; @author Philip Levis&#10; @date   August 8 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="NNM" loc="44:NNM.nc">
      <documentation loc="27:NNM.nc">
        <short>&#10; module NNM, provide interface NN&#10; modified from nn.h and nn.c from RSAREF 2.0&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="ECCC" loc="37:ECCC.nc">
      <documentation loc="26:ECCC.nc">
        <short>&#10; ECCC.nc&#10; Configuration of Ecc&#10;&#10; Author: An Liu&#10; Date: 09/29/2006&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="ECCM" loc="33:ECCM.nc">
      <documentation loc="26:ECCM.nc">
        <short>&#10; ECCM, the module implement ECC.nc&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="secp128r1" loc="34:secp128r1.nc">
      <documentation loc="26:secp128r1.nc">
        <short>&#10; Module for curve secp128r1 in 8 bit form&#10; &#10; Author: An Liu&#10; Date: 09/15/2005&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="secp128r2" loc="36:secp128r2.nc">
      <documentation loc="26:secp128r2.nc">
        <short>&#10; Module for curve secp128r2 in 8 bit form&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10; Modified by: Panos Kampanakis&#10; Date: 01/31/2007&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="secp160k1" loc="36:secp160k1.nc">
      <documentation loc="26:secp160k1.nc">
        <short>&#10; Module for curve secp160k1&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10; Modified by: Panos Kampanakis&#10; Date: 01/31/2007&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="secp160r1" loc="34:secp160r1.nc">
      <documentation loc="26:secp160r1.nc">
        <short>&#10; Module for curve secp160r1&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="secp160r2" loc="36:secp160r2.nc">
      <documentation loc="26:secp160r2.nc">
        <short>&#10; Module for secp160r2 in 16 bit form&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10; Modified by: Panos Kampanakis&#10; Date: 01/31/2007&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="secp192k1" loc="36:secp192k1.nc">
      <documentation loc="26:secp192k1.nc">
        <short>&#10; Module for curve secp192k1&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10; Modified by: Panos Kampanakis&#10; Date: 01/31/2007&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="secp192r1" loc="36:secp192r1.nc">
      <documentation loc="26:secp192r1.nc">
        <short>&#10; Module for curve secp192r1&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10; Modified by: Panos Kampanakis&#10; Date: 01/31/2007&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="ECDSAC" loc="33:ECDSAC.nc">
      <documentation loc="26:ECDSAC.nc">
        <short>&#10; configuration for ECDSA&#10; &#10; Author: An Liu&#10; Date: 09/15/2005&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="ECDSAM" loc="53:ECDSAM.nc">
      <documentation loc="26:ECDSAM.nc">
        <short>&#10; module for ECDSA&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="SHA1M" loc="42:SHA1M.nc">
      <module/>
    </component>
    <component qname="testECDSA.TimerMilliC" loc="44(testECDSA.TimerMilliC):/home/user/tinyos-main/tos/system/TimerMilliC.nc">
      <documentation loc="33:/home/user/tinyos-main/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/home/user/tinyos-main/tos/system/TimerMilliP.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40a3f038"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="43:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="33:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/home/user/tinyos-main/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:/home/user/tinyos-main/tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:/home/user/tinyos-main/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:/home/user/tinyos-main/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:/home/user/tinyos-main/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:/home/user/tinyos-main/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:/home/user/tinyos-main/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="78:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <documentation loc="69:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega128 serial port HPL.</short>
        <long> &#10; Private component of the Atmega128 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:/home/user/tinyos-main/tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:/home/user/tinyos-main/tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="41:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega128 timer 2.</short>
        <long>&#10; HPL interface to Atmega128 timer 2.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3P" loc="42:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
        <short>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.</short>
        <long>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TThree" ref="0x403c9bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TMicro" ref="0x403a7370"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TThree" ref="0x403c9bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x403c71d8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:/home/user/tinyos-main/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x4043db08" loc="40:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x4043dd20" loc="40:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40444010" loc="40:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40449f10" loc="41:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40446158" loc="42:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40446380" loc="43:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40446570" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40496010" loc="42:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40496238" loc="43:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40496460" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40496650" loc="45:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/home/user/tinyos-main/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/home/user/tinyos-main/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40a3f038" loc="23:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40a3f038"/></type-var>
        </typedef>
        <constant name="divider" ref="0x40a3f1f8" loc="23:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="11:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40a5a2f8" loc="23:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40a5a2f8"/></type-var>
        </typedef>
        <constant name="divider" ref="0x40a5a4b8" loc="23:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40a2d568" loc="46:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40a2d568"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40afab60" loc="46:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40afab60"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x40afad40" loc="46:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/home/user/tinyos-main/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40b153e8" loc="46:/home/user/tinyos-main/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40b153e8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:/home/user/tinyos-main/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:/home/user/tinyos-main/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x40d68978" loc="44:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40d68978"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x40d68b98" loc="44:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x40d6a5e0" loc="42:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x40d6a5e0"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x40d6aa28" loc="43:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40d6aa28"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x40cf58a8" loc="55:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x40cf58a8"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x40cf5d08" loc="56:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x40cf5d08"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x40d7a010" loc="57:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x40d7a010"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x40d7a480" loc="58:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x40d7a480"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x40d7a6e8" loc="59:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x40d7ab70" loc="60:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x40d7ab70"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x403feec8" loc="58:/home/user/tinyos-main/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x403feec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404010c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x403fe2a0" loc="57:/home/user/tinyos-main/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x403fe2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x403fe478"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x404060f8" loc="52:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x404060f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404062d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404070b0" loc="46:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404070b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40407288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x4040d968" loc="50:/home/user/tinyos-main/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x4040d968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x4040db40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x4040dc20"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x4040dd00"/>
        <function-ref name="actualMicro" scoped="" ref="0x4040dde0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x4040dec0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x4040b010" loc="45:/home/user/tinyos-main/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x4040b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4040b1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40406b98" loc="44:/home/user/tinyos-main/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40406b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40406d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x4040b418" loc="46:/home/user/tinyos-main/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x4040b418"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4040b5f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x404057e0" loc="41:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x404057e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404059b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x40405410" loc="40:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x40405410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404055e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x404184a8" loc="45:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x404184a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40418680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x404159e8" loc="44:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x404159e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40415bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40415ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40415d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40415e60"/>
        <function-ref name="get" scoped="" ref="0x40418010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404180f0"/>
        <function-ref name="set" scoped="" ref="0x404181d0"/>
        <function-ref name="clr" scoped="" ref="0x404182b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4040f3d0" loc="43:/home/user/tinyos-main/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4040f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4040f5a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x40438210" loc="100:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x40438210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404385e8"/>
        <function-ref name="isInput" scoped="" ref="0x404386c8"/>
        <function-ref name="toggle" scoped="" ref="0x404387a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40438888"/>
        <function-ref name="get" scoped="" ref="0x40438968"/>
        <function-ref name="makeOutput" scoped="" ref="0x40438a48"/>
        <function-ref name="set" scoped="" ref="0x40438b28"/>
        <function-ref name="clr" scoped="" ref="0x40438c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x40429750" loc="74:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x40429750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40429928"/>
        <function-ref name="isInput" scoped="" ref="0x40429a08"/>
        <function-ref name="toggle" scoped="" ref="0x40429ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40429bc8"/>
        <function-ref name="get" scoped="" ref="0x40429ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40429d88"/>
        <function-ref name="set" scoped="" ref="0x40429e68"/>
        <function-ref name="clr" scoped="" ref="0x40428010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x4042dce8" loc="85:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x4042dce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042dec0"/>
        <function-ref name="isInput" scoped="" ref="0x40436010"/>
        <function-ref name="toggle" scoped="" ref="0x404360f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404361d0"/>
        <function-ref name="get" scoped="" ref="0x404362b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40436390"/>
        <function-ref name="set" scoped="" ref="0x40436470"/>
        <function-ref name="clr" scoped="" ref="0x40436550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x40432ea8" loc="94:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x40432ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043b0c0"/>
        <function-ref name="isInput" scoped="" ref="0x4043b1a0"/>
        <function-ref name="toggle" scoped="" ref="0x4043b280"/>
        <function-ref name="isOutput" scoped="" ref="0x4043b360"/>
        <function-ref name="get" scoped="" ref="0x4043b440"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043b520"/>
        <function-ref name="set" scoped="" ref="0x4043b600"/>
        <function-ref name="clr" scoped="" ref="0x4043b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x404222f0" loc="52:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x404222f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404224c8"/>
        <function-ref name="isInput" scoped="" ref="0x404225a8"/>
        <function-ref name="toggle" scoped="" ref="0x40422688"/>
        <function-ref name="isOutput" scoped="" ref="0x40422768"/>
        <function-ref name="get" scoped="" ref="0x40422848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40422928"/>
        <function-ref name="set" scoped="" ref="0x40422a08"/>
        <function-ref name="clr" scoped="" ref="0x40422ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x40433a98" loc="92:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x40433a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40433c70"/>
        <function-ref name="isInput" scoped="" ref="0x40433d50"/>
        <function-ref name="toggle" scoped="" ref="0x40433e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40433f10"/>
        <function-ref name="get" scoped="" ref="0x40432010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404320f0"/>
        <function-ref name="set" scoped="" ref="0x404321d0"/>
        <function-ref name="clr" scoped="" ref="0x404322b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x40421750" loc="55:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x40421750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40421928"/>
        <function-ref name="isInput" scoped="" ref="0x40421a08"/>
        <function-ref name="toggle" scoped="" ref="0x40421ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40421bc8"/>
        <function-ref name="get" scoped="" ref="0x40421ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40421d88"/>
        <function-ref name="set" scoped="" ref="0x40421e68"/>
        <function-ref name="clr" scoped="" ref="0x40420010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x40424ea8" loc="66:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x40424ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404230c0"/>
        <function-ref name="isInput" scoped="" ref="0x404231a0"/>
        <function-ref name="toggle" scoped="" ref="0x40423280"/>
        <function-ref name="isOutput" scoped="" ref="0x40423360"/>
        <function-ref name="get" scoped="" ref="0x40423440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40423520"/>
        <function-ref name="set" scoped="" ref="0x40423600"/>
        <function-ref name="clr" scoped="" ref="0x404236e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x40431670" loc="77:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x40431670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40431848"/>
        <function-ref name="isInput" scoped="" ref="0x40431928"/>
        <function-ref name="toggle" scoped="" ref="0x40431a08"/>
        <function-ref name="isOutput" scoped="" ref="0x40431ae8"/>
        <function-ref name="get" scoped="" ref="0x40431bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40431ca8"/>
        <function-ref name="set" scoped="" ref="0x40431d88"/>
        <function-ref name="clr" scoped="" ref="0x40431e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x40435c08" loc="88:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x40435c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40435de0"/>
        <function-ref name="isInput" scoped="" ref="0x40435ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40434010"/>
        <function-ref name="isOutput" scoped="" ref="0x404340f0"/>
        <function-ref name="get" scoped="" ref="0x404341d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404342b0"/>
        <function-ref name="set" scoped="" ref="0x40434390"/>
        <function-ref name="clr" scoped="" ref="0x40434470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x4041b010" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x4041b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4041b1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4041b2c8"/>
        <function-ref name="toggle" scoped="" ref="0x4041b3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4041b488"/>
        <function-ref name="get" scoped="" ref="0x4041b568"/>
        <function-ref name="makeOutput" scoped="" ref="0x4041b648"/>
        <function-ref name="set" scoped="" ref="0x4041b728"/>
        <function-ref name="clr" scoped="" ref="0x4041b808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x4041f670" loc="58:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x4041f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4041f848"/>
        <function-ref name="isInput" scoped="" ref="0x4041f928"/>
        <function-ref name="toggle" scoped="" ref="0x4041fa08"/>
        <function-ref name="isOutput" scoped="" ref="0x4041fae8"/>
        <function-ref name="get" scoped="" ref="0x4041fbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4041fca8"/>
        <function-ref name="set" scoped="" ref="0x4041fd88"/>
        <function-ref name="clr" scoped="" ref="0x4041fe68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x4042cce8" loc="69:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x4042cce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042cec0"/>
        <function-ref name="isInput" scoped="" ref="0x4042b010"/>
        <function-ref name="toggle" scoped="" ref="0x4042b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4042b1d0"/>
        <function-ref name="get" scoped="" ref="0x4042b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042b390"/>
        <function-ref name="set" scoped="" ref="0x4042b470"/>
        <function-ref name="clr" scoped="" ref="0x4042b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x4042f4b0" loc="80:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x4042f4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042f688"/>
        <function-ref name="isInput" scoped="" ref="0x4042f768"/>
        <function-ref name="toggle" scoped="" ref="0x4042f848"/>
        <function-ref name="isOutput" scoped="" ref="0x4042f928"/>
        <function-ref name="get" scoped="" ref="0x4042fa08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042fae8"/>
        <function-ref name="set" scoped="" ref="0x4042fbc8"/>
        <function-ref name="clr" scoped="" ref="0x4042fca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x4043ace8" loc="97:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x4043ace8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043aec0"/>
        <function-ref name="isInput" scoped="" ref="0x40439010"/>
        <function-ref name="toggle" scoped="" ref="0x404390f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404391d0"/>
        <function-ref name="get" scoped="" ref="0x404392b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40439390"/>
        <function-ref name="set" scoped="" ref="0x40439470"/>
        <function-ref name="clr" scoped="" ref="0x40439550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x404402f0" loc="103:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x404402f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404404c8"/>
        <function-ref name="isInput" scoped="" ref="0x404405a8"/>
        <function-ref name="toggle" scoped="" ref="0x40440688"/>
        <function-ref name="isOutput" scoped="" ref="0x40440768"/>
        <function-ref name="get" scoped="" ref="0x40440848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40440928"/>
        <function-ref name="set" scoped="" ref="0x40440a08"/>
        <function-ref name="clr" scoped="" ref="0x40440ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x4042e8e0" loc="83:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x4042e8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042eab8"/>
        <function-ref name="isInput" scoped="" ref="0x4042eb98"/>
        <function-ref name="toggle" scoped="" ref="0x4042ec78"/>
        <function-ref name="isOutput" scoped="" ref="0x4042ed58"/>
        <function-ref name="get" scoped="" ref="0x4042ee38"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042ef18"/>
        <function-ref name="set" scoped="" ref="0x4042d010"/>
        <function-ref name="clr" scoped="" ref="0x4042d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x4041aea8" loc="50:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x4041aea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404190c0"/>
        <function-ref name="isInput" scoped="" ref="0x404191a0"/>
        <function-ref name="toggle" scoped="" ref="0x40419280"/>
        <function-ref name="isOutput" scoped="" ref="0x40419360"/>
        <function-ref name="get" scoped="" ref="0x40419440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40419520"/>
        <function-ref name="set" scoped="" ref="0x40419600"/>
        <function-ref name="clr" scoped="" ref="0x404196e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x40427590" loc="61:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x40427590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40427768"/>
        <function-ref name="isInput" scoped="" ref="0x40427848"/>
        <function-ref name="toggle" scoped="" ref="0x40427928"/>
        <function-ref name="isOutput" scoped="" ref="0x40427a08"/>
        <function-ref name="get" scoped="" ref="0x40427ae8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40427bc8"/>
        <function-ref name="set" scoped="" ref="0x40427ca8"/>
        <function-ref name="clr" scoped="" ref="0x40427d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x40438e08" loc="101:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x40438e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40437010"/>
        <function-ref name="isInput" scoped="" ref="0x404370f0"/>
        <function-ref name="toggle" scoped="" ref="0x404371d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404372b0"/>
        <function-ref name="get" scoped="" ref="0x40437390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40437470"/>
        <function-ref name="set" scoped="" ref="0x40437550"/>
        <function-ref name="clr" scoped="" ref="0x40437630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x40425a08" loc="64:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x40425a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40425be0"/>
        <function-ref name="isInput" scoped="" ref="0x40425cc0"/>
        <function-ref name="toggle" scoped="" ref="0x40425da0"/>
        <function-ref name="isOutput" scoped="" ref="0x40425e80"/>
        <function-ref name="get" scoped="" ref="0x40424010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404240f0"/>
        <function-ref name="set" scoped="" ref="0x404241d0"/>
        <function-ref name="clr" scoped="" ref="0x404242b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x40428210" loc="75:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x40428210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404283e8"/>
        <function-ref name="isInput" scoped="" ref="0x404284c8"/>
        <function-ref name="toggle" scoped="" ref="0x404285a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40428688"/>
        <function-ref name="get" scoped="" ref="0x40428768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40428848"/>
        <function-ref name="set" scoped="" ref="0x40428928"/>
        <function-ref name="clr" scoped="" ref="0x40428a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x40436750" loc="86:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x40436750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40436928"/>
        <function-ref name="isInput" scoped="" ref="0x40436a08"/>
        <function-ref name="toggle" scoped="" ref="0x40436ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40436bc8"/>
        <function-ref name="get" scoped="" ref="0x40436ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40436d88"/>
        <function-ref name="set" scoped="" ref="0x40436e68"/>
        <function-ref name="clr" scoped="" ref="0x40435010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x4043b8e0" loc="95:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x4043b8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043bab8"/>
        <function-ref name="isInput" scoped="" ref="0x4043bb98"/>
        <function-ref name="toggle" scoped="" ref="0x4043bc78"/>
        <function-ref name="isOutput" scoped="" ref="0x4043bd58"/>
        <function-ref name="get" scoped="" ref="0x4043be38"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043bf18"/>
        <function-ref name="set" scoped="" ref="0x4043a010"/>
        <function-ref name="clr" scoped="" ref="0x4043a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x40422ce8" loc="53:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x40422ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40422ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40421010"/>
        <function-ref name="toggle" scoped="" ref="0x404210f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404211d0"/>
        <function-ref name="get" scoped="" ref="0x404212b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40421390"/>
        <function-ref name="set" scoped="" ref="0x40421470"/>
        <function-ref name="clr" scoped="" ref="0x40421550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x40420210" loc="56:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x40420210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404203e8"/>
        <function-ref name="isInput" scoped="" ref="0x404204c8"/>
        <function-ref name="toggle" scoped="" ref="0x404205a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40420688"/>
        <function-ref name="get" scoped="" ref="0x40420768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40420848"/>
        <function-ref name="set" scoped="" ref="0x40420928"/>
        <function-ref name="clr" scoped="" ref="0x40420a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x404238e0" loc="67:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x404238e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40423ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40423b98"/>
        <function-ref name="toggle" scoped="" ref="0x40423c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40423d58"/>
        <function-ref name="get" scoped="" ref="0x40423e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40423f18"/>
        <function-ref name="set" scoped="" ref="0x4042c010"/>
        <function-ref name="clr" scoped="" ref="0x4042c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x404300a0" loc="78:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x404300a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40430278"/>
        <function-ref name="isInput" scoped="" ref="0x40430358"/>
        <function-ref name="toggle" scoped="" ref="0x40430438"/>
        <function-ref name="isOutput" scoped="" ref="0x40430518"/>
        <function-ref name="get" scoped="" ref="0x404305f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404306d8"/>
        <function-ref name="set" scoped="" ref="0x404307b8"/>
        <function-ref name="clr" scoped="" ref="0x40430898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x40434670" loc="89:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x40434670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40434848"/>
        <function-ref name="isInput" scoped="" ref="0x40434928"/>
        <function-ref name="toggle" scoped="" ref="0x40434a08"/>
        <function-ref name="isOutput" scoped="" ref="0x40434ae8"/>
        <function-ref name="get" scoped="" ref="0x40434bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40434ca8"/>
        <function-ref name="set" scoped="" ref="0x40434d88"/>
        <function-ref name="clr" scoped="" ref="0x40434e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x4041ba08" loc="48:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x4041ba08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4041bbe0"/>
        <function-ref name="isInput" scoped="" ref="0x4041bcc0"/>
        <function-ref name="toggle" scoped="" ref="0x4041bda0"/>
        <function-ref name="isOutput" scoped="" ref="0x4041be80"/>
        <function-ref name="get" scoped="" ref="0x4041a010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4041a0f0"/>
        <function-ref name="set" scoped="" ref="0x4041a1d0"/>
        <function-ref name="clr" scoped="" ref="0x4041a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x4041e0a0" loc="59:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x4041e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4041e2f8"/>
        <function-ref name="isInput" scoped="" ref="0x4041e3d8"/>
        <function-ref name="toggle" scoped="" ref="0x4041e4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x4041e598"/>
        <function-ref name="get" scoped="" ref="0x4041e678"/>
        <function-ref name="makeOutput" scoped="" ref="0x4041e758"/>
        <function-ref name="set" scoped="" ref="0x4041e838"/>
        <function-ref name="clr" scoped="" ref="0x4041e918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x4042b750" loc="70:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x4042b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042b928"/>
        <function-ref name="isInput" scoped="" ref="0x4042ba08"/>
        <function-ref name="toggle" scoped="" ref="0x4042bae8"/>
        <function-ref name="isOutput" scoped="" ref="0x4042bbc8"/>
        <function-ref name="get" scoped="" ref="0x4042bca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042bd88"/>
        <function-ref name="set" scoped="" ref="0x4042be68"/>
        <function-ref name="clr" scoped="" ref="0x4042a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x40439750" loc="98:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x40439750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40439928"/>
        <function-ref name="isInput" scoped="" ref="0x40439a08"/>
        <function-ref name="toggle" scoped="" ref="0x40439ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40439bc8"/>
        <function-ref name="get" scoped="" ref="0x40439ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40439d88"/>
        <function-ref name="set" scoped="" ref="0x40439e68"/>
        <function-ref name="clr" scoped="" ref="0x40438010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x4042ac08" loc="73:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x4042ac08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042aee0"/>
        <function-ref name="isInput" scoped="" ref="0x40429010"/>
        <function-ref name="toggle" scoped="" ref="0x404290f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404291d0"/>
        <function-ref name="get" scoped="" ref="0x404292b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40429390"/>
        <function-ref name="set" scoped="" ref="0x40429470"/>
        <function-ref name="clr" scoped="" ref="0x40429550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x4042d2f0" loc="84:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x4042d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042d4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4042d5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4042d688"/>
        <function-ref name="isOutput" scoped="" ref="0x4042d768"/>
        <function-ref name="get" scoped="" ref="0x4042d848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042d928"/>
        <function-ref name="set" scoped="" ref="0x4042da08"/>
        <function-ref name="clr" scoped="" ref="0x4042dae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x404324b0" loc="93:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x404324b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40432688"/>
        <function-ref name="isInput" scoped="" ref="0x40432768"/>
        <function-ref name="toggle" scoped="" ref="0x40432848"/>
        <function-ref name="isOutput" scoped="" ref="0x40432928"/>
        <function-ref name="get" scoped="" ref="0x40432a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40432ae8"/>
        <function-ref name="set" scoped="" ref="0x40432bc8"/>
        <function-ref name="clr" scoped="" ref="0x40432ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x40440ce8" loc="104:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x40440ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40440ec0"/>
        <function-ref name="isInput" scoped="" ref="0x4043f010"/>
        <function-ref name="toggle" scoped="" ref="0x4043f0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4043f1d0"/>
        <function-ref name="get" scoped="" ref="0x4043f2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043f390"/>
        <function-ref name="set" scoped="" ref="0x4043f470"/>
        <function-ref name="clr" scoped="" ref="0x4043f550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x404198e0" loc="51:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x404198e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40419ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40419b98"/>
        <function-ref name="toggle" scoped="" ref="0x40419c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40419d58"/>
        <function-ref name="get" scoped="" ref="0x40419e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40419f18"/>
        <function-ref name="set" scoped="" ref="0x40422010"/>
        <function-ref name="clr" scoped="" ref="0x404220f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x40425010" loc="62:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x40425010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404251e8"/>
        <function-ref name="isInput" scoped="" ref="0x404252c8"/>
        <function-ref name="toggle" scoped="" ref="0x404253a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40425488"/>
        <function-ref name="get" scoped="" ref="0x40425568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40425648"/>
        <function-ref name="set" scoped="" ref="0x40425728"/>
        <function-ref name="clr" scoped="" ref="0x40425808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x404330a0" loc="91:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x404330a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40433278"/>
        <function-ref name="isInput" scoped="" ref="0x40433358"/>
        <function-ref name="toggle" scoped="" ref="0x40433438"/>
        <function-ref name="isOutput" scoped="" ref="0x40433518"/>
        <function-ref name="get" scoped="" ref="0x404335f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404336d8"/>
        <function-ref name="set" scoped="" ref="0x404337b8"/>
        <function-ref name="clr" scoped="" ref="0x40433898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x404244b0" loc="65:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x404244b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40424688"/>
        <function-ref name="isInput" scoped="" ref="0x40424768"/>
        <function-ref name="toggle" scoped="" ref="0x40424848"/>
        <function-ref name="isOutput" scoped="" ref="0x40424928"/>
        <function-ref name="get" scoped="" ref="0x40424a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40424ae8"/>
        <function-ref name="set" scoped="" ref="0x40424bc8"/>
        <function-ref name="clr" scoped="" ref="0x40424ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x40428c08" loc="76:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x40428c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40428de0"/>
        <function-ref name="isInput" scoped="" ref="0x40428ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40431010"/>
        <function-ref name="isOutput" scoped="" ref="0x404310f0"/>
        <function-ref name="get" scoped="" ref="0x404311d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404312b0"/>
        <function-ref name="set" scoped="" ref="0x40431390"/>
        <function-ref name="clr" scoped="" ref="0x40431470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x40435210" loc="87:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x40435210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404353e8"/>
        <function-ref name="isInput" scoped="" ref="0x404354c8"/>
        <function-ref name="toggle" scoped="" ref="0x404355a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40435688"/>
        <function-ref name="get" scoped="" ref="0x40435768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40435848"/>
        <function-ref name="set" scoped="" ref="0x40435928"/>
        <function-ref name="clr" scoped="" ref="0x40435a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x4043a2f0" loc="96:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x4043a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043a4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4043a5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4043a688"/>
        <function-ref name="isOutput" scoped="" ref="0x4043a768"/>
        <function-ref name="get" scoped="" ref="0x4043a848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043a928"/>
        <function-ref name="set" scoped="" ref="0x4043aa08"/>
        <function-ref name="clr" scoped="" ref="0x4043aae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x40411550" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x40411550"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40411728"/>
        <function-ref name="isInput" scoped="" ref="0x40411808"/>
        <function-ref name="toggle" scoped="" ref="0x404118e8"/>
        <function-ref name="isOutput" scoped="" ref="0x404119c8"/>
        <function-ref name="get" scoped="" ref="0x40411aa8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40411b88"/>
        <function-ref name="set" scoped="" ref="0x40411c68"/>
        <function-ref name="clr" scoped="" ref="0x40411d48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x40420c08" loc="57:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x40420c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40420de0"/>
        <function-ref name="isInput" scoped="" ref="0x40420ec0"/>
        <function-ref name="toggle" scoped="" ref="0x4041f010"/>
        <function-ref name="isOutput" scoped="" ref="0x4041f0f0"/>
        <function-ref name="get" scoped="" ref="0x4041f1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4041f2b0"/>
        <function-ref name="set" scoped="" ref="0x4041f390"/>
        <function-ref name="clr" scoped="" ref="0x4041f470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x4042c2f0" loc="68:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x4042c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042c4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4042c5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4042c688"/>
        <function-ref name="isOutput" scoped="" ref="0x4042c768"/>
        <function-ref name="get" scoped="" ref="0x4042c848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042c928"/>
        <function-ref name="set" scoped="" ref="0x4042ca08"/>
        <function-ref name="clr" scoped="" ref="0x4042cae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x40430a98" loc="79:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x40430a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40430c70"/>
        <function-ref name="isInput" scoped="" ref="0x40430d50"/>
        <function-ref name="toggle" scoped="" ref="0x40430e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40430f10"/>
        <function-ref name="get" scoped="" ref="0x4042f010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042f0f0"/>
        <function-ref name="set" scoped="" ref="0x4042f1d0"/>
        <function-ref name="clr" scoped="" ref="0x4042f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x40437830" loc="102:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x40437830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40437a08"/>
        <function-ref name="isInput" scoped="" ref="0x40437ae8"/>
        <function-ref name="toggle" scoped="" ref="0x40437bc8"/>
        <function-ref name="isOutput" scoped="" ref="0x40437ca8"/>
        <function-ref name="get" scoped="" ref="0x40437d88"/>
        <function-ref name="makeOutput" scoped="" ref="0x40437e68"/>
        <function-ref name="set" scoped="" ref="0x40440010"/>
        <function-ref name="clr" scoped="" ref="0x404400f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x4042fea8" loc="82:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x4042fea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042e0c0"/>
        <function-ref name="isInput" scoped="" ref="0x4042e1a0"/>
        <function-ref name="toggle" scoped="" ref="0x4042e280"/>
        <function-ref name="isOutput" scoped="" ref="0x4042e360"/>
        <function-ref name="get" scoped="" ref="0x4042e440"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042e520"/>
        <function-ref name="set" scoped="" ref="0x4042e600"/>
        <function-ref name="clr" scoped="" ref="0x4042e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x4042a210" loc="71:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x4042a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042a3e8"/>
        <function-ref name="isInput" scoped="" ref="0x4042a4c8"/>
        <function-ref name="toggle" scoped="" ref="0x4042a5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4042a688"/>
        <function-ref name="get" scoped="" ref="0x4042a768"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042a848"/>
        <function-ref name="set" scoped="" ref="0x4042a928"/>
        <function-ref name="clr" scoped="" ref="0x4042aa08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x4041a4b0" loc="49:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x4041a4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4041a688"/>
        <function-ref name="isInput" scoped="" ref="0x4041a768"/>
        <function-ref name="toggle" scoped="" ref="0x4041a848"/>
        <function-ref name="isOutput" scoped="" ref="0x4041a928"/>
        <function-ref name="get" scoped="" ref="0x4041aa08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4041aae8"/>
        <function-ref name="set" scoped="" ref="0x4041abc8"/>
        <function-ref name="clr" scoped="" ref="0x4041aca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x4041eb18" loc="60:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x4041eb18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4041ecf0"/>
        <function-ref name="isInput" scoped="" ref="0x4041edd0"/>
        <function-ref name="toggle" scoped="" ref="0x4041eeb0"/>
        <function-ref name="isOutput" scoped="" ref="0x40427010"/>
        <function-ref name="get" scoped="" ref="0x404270f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404271d0"/>
        <function-ref name="set" scoped="" ref="0x404272b0"/>
        <function-ref name="clr" scoped="" ref="0x40427390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40465330" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40465330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40465508"/>
        <function-ref name="isInput" scoped="" ref="0x404655e8"/>
        <function-ref name="toggle" scoped="" ref="0x404656c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404657a8"/>
        <function-ref name="get" scoped="" ref="0x40465888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40465968"/>
        <function-ref name="set" scoped="" ref="0x40465a48"/>
        <function-ref name="clr" scoped="" ref="0x40465b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4046d030" loc="49:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4046d030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046d208"/>
        <function-ref name="isInput" scoped="" ref="0x4046d2e8"/>
        <function-ref name="toggle" scoped="" ref="0x4046d3c8"/>
        <function-ref name="isOutput" scoped="" ref="0x4046d4a8"/>
        <function-ref name="get" scoped="" ref="0x4046d588"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046d668"/>
        <function-ref name="set" scoped="" ref="0x4046d748"/>
        <function-ref name="clr" scoped="" ref="0x4046d828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40467010" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40467010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404671e8"/>
        <function-ref name="isInput" scoped="" ref="0x404672c8"/>
        <function-ref name="toggle" scoped="" ref="0x404673a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40467488"/>
        <function-ref name="get" scoped="" ref="0x40467568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40467648"/>
        <function-ref name="set" scoped="" ref="0x40467728"/>
        <function-ref name="clr" scoped="" ref="0x40467808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40465c88" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40465c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40465e60"/>
        <function-ref name="isInput" scoped="" ref="0x40464010"/>
        <function-ref name="toggle" scoped="" ref="0x404640f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404641d0"/>
        <function-ref name="get" scoped="" ref="0x404642b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40464390"/>
        <function-ref name="set" scoped="" ref="0x40464470"/>
        <function-ref name="clr" scoped="" ref="0x40464550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4046d988" loc="50:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4046d988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046db60"/>
        <function-ref name="isInput" scoped="" ref="0x4046dc40"/>
        <function-ref name="toggle" scoped="" ref="0x4046dd20"/>
        <function-ref name="isOutput" scoped="" ref="0x4046de00"/>
        <function-ref name="get" scoped="" ref="0x4046dee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046c010"/>
        <function-ref name="set" scoped="" ref="0x4046c0f0"/>
        <function-ref name="clr" scoped="" ref="0x4046c1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40467968" loc="45:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40467968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40467b40"/>
        <function-ref name="isInput" scoped="" ref="0x40467c20"/>
        <function-ref name="toggle" scoped="" ref="0x40467d00"/>
        <function-ref name="isOutput" scoped="" ref="0x40467de0"/>
        <function-ref name="get" scoped="" ref="0x40467ec0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40465010"/>
        <function-ref name="set" scoped="" ref="0x404650f0"/>
        <function-ref name="clr" scoped="" ref="0x404651d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x404646b0" loc="48:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x404646b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40464888"/>
        <function-ref name="isInput" scoped="" ref="0x40464968"/>
        <function-ref name="toggle" scoped="" ref="0x40464a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40464b28"/>
        <function-ref name="get" scoped="" ref="0x40464c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40464ce8"/>
        <function-ref name="set" scoped="" ref="0x40464dc8"/>
        <function-ref name="clr" scoped="" ref="0x40464ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4046c330" loc="51:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4046c330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046c508"/>
        <function-ref name="isInput" scoped="" ref="0x4046c5e8"/>
        <function-ref name="toggle" scoped="" ref="0x4046c6c8"/>
        <function-ref name="isOutput" scoped="" ref="0x4046c7a8"/>
        <function-ref name="get" scoped="" ref="0x4046c888"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046c968"/>
        <function-ref name="set" scoped="" ref="0x4046ca48"/>
        <function-ref name="clr" scoped="" ref="0x4046cb28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d9fbb0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d9fbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d9fd88"/>
        <function-ref name="isInput" scoped="" ref="0x40d9fe68"/>
        <function-ref name="toggle" scoped="" ref="0x40d9e010"/>
        <function-ref name="isOutput" scoped="" ref="0x40d9e0f0"/>
        <function-ref name="get" scoped="" ref="0x40d9e1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d9e2b0"/>
        <function-ref name="set" scoped="" ref="0x40d9e390"/>
        <function-ref name="clr" scoped="" ref="0x40d9e470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d9d6c0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d9d6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d9d898"/>
        <function-ref name="isInput" scoped="" ref="0x40d9d978"/>
        <function-ref name="toggle" scoped="" ref="0x40d9da58"/>
        <function-ref name="isOutput" scoped="" ref="0x40d9db38"/>
        <function-ref name="get" scoped="" ref="0x40d9dc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d9dcf8"/>
        <function-ref name="set" scoped="" ref="0x40d9ddd8"/>
        <function-ref name="clr" scoped="" ref="0x40d9deb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40dce0b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40dce0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40dce288"/>
        <function-ref name="isInput" scoped="" ref="0x40dce368"/>
        <function-ref name="toggle" scoped="" ref="0x40dce448"/>
        <function-ref name="isOutput" scoped="" ref="0x40dce528"/>
        <function-ref name="get" scoped="" ref="0x40dce608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40dce6e8"/>
        <function-ref name="set" scoped="" ref="0x40dce7c8"/>
        <function-ref name="clr" scoped="" ref="0x40dce8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40dcda88" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40dcda88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40dcdc60"/>
        <function-ref name="isInput" scoped="" ref="0x40dcdd40"/>
        <function-ref name="toggle" scoped="" ref="0x40dcde20"/>
        <function-ref name="isOutput" scoped="" ref="0x40dcdf00"/>
        <function-ref name="get" scoped="" ref="0x40dcc010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40dcc0f0"/>
        <function-ref name="set" scoped="" ref="0x40dcc1d0"/>
        <function-ref name="clr" scoped="" ref="0x40dcc2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40dcb538" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40dcb538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40dcb710"/>
        <function-ref name="isInput" scoped="" ref="0x40dcb7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40dcb8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40dcb9b0"/>
        <function-ref name="get" scoped="" ref="0x40dcba90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40dcbb70"/>
        <function-ref name="set" scoped="" ref="0x40dcbc50"/>
        <function-ref name="clr" scoped="" ref="0x40dcbd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40dc9010" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40dc9010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40dc91e8"/>
        <function-ref name="isInput" scoped="" ref="0x40dc92c8"/>
        <function-ref name="toggle" scoped="" ref="0x40dc93a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40dc9488"/>
        <function-ref name="get" scoped="" ref="0x40dc9568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40dc9648"/>
        <function-ref name="set" scoped="" ref="0x40dc9728"/>
        <function-ref name="clr" scoped="" ref="0x40dc9808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40dc89e8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40dc89e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40dc8bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40dc8ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40dc8d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40dc8e60"/>
        <function-ref name="get" scoped="" ref="0x40dc7010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40dc70f0"/>
        <function-ref name="set" scoped="" ref="0x40dc71d0"/>
        <function-ref name="clr" scoped="" ref="0x40dc72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40dc6538" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40dc6538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40dc6710"/>
        <function-ref name="isInput" scoped="" ref="0x40dc67f0"/>
        <function-ref name="toggle" scoped="" ref="0x40dc68d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40dc69b0"/>
        <function-ref name="get" scoped="" ref="0x40dc6a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40dc6b70"/>
        <function-ref name="set" scoped="" ref="0x40dc6c50"/>
        <function-ref name="clr" scoped="" ref="0x40dc6d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40472ba8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40472ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40472d80"/>
        <function-ref name="isInput" scoped="" ref="0x40472e60"/>
        <function-ref name="toggle" scoped="" ref="0x40471010"/>
        <function-ref name="isOutput" scoped="" ref="0x404710f0"/>
        <function-ref name="get" scoped="" ref="0x404711d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404712b0"/>
        <function-ref name="set" scoped="" ref="0x40471390"/>
        <function-ref name="clr" scoped="" ref="0x40471470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40470890" loc="49:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40470890"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40470a68"/>
        <function-ref name="isInput" scoped="" ref="0x40470b48"/>
        <function-ref name="toggle" scoped="" ref="0x40470c28"/>
        <function-ref name="isOutput" scoped="" ref="0x40470d08"/>
        <function-ref name="get" scoped="" ref="0x40470de8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40470ec8"/>
        <function-ref name="set" scoped="" ref="0x4046f010"/>
        <function-ref name="clr" scoped="" ref="0x4046f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40469888" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40469888"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40469a60"/>
        <function-ref name="isInput" scoped="" ref="0x40469b40"/>
        <function-ref name="toggle" scoped="" ref="0x40469c20"/>
        <function-ref name="isOutput" scoped="" ref="0x40469d00"/>
        <function-ref name="get" scoped="" ref="0x40469de0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40469ec0"/>
        <function-ref name="set" scoped="" ref="0x40472010"/>
        <function-ref name="clr" scoped="" ref="0x404720f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x404715d0" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x404715d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404717a8"/>
        <function-ref name="isInput" scoped="" ref="0x40471888"/>
        <function-ref name="toggle" scoped="" ref="0x40471968"/>
        <function-ref name="isOutput" scoped="" ref="0x40471a48"/>
        <function-ref name="get" scoped="" ref="0x40471b28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40471c08"/>
        <function-ref name="set" scoped="" ref="0x40471ce8"/>
        <function-ref name="clr" scoped="" ref="0x40471dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4046f250" loc="50:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4046f250"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046f428"/>
        <function-ref name="isInput" scoped="" ref="0x4046f508"/>
        <function-ref name="toggle" scoped="" ref="0x4046f5e8"/>
        <function-ref name="isOutput" scoped="" ref="0x4046f6c8"/>
        <function-ref name="get" scoped="" ref="0x4046f7a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4046f888"/>
        <function-ref name="set" scoped="" ref="0x4046f968"/>
        <function-ref name="clr" scoped="" ref="0x4046fa48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40472250" loc="45:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40472250"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40472428"/>
        <function-ref name="isInput" scoped="" ref="0x40472508"/>
        <function-ref name="toggle" scoped="" ref="0x404725e8"/>
        <function-ref name="isOutput" scoped="" ref="0x404726c8"/>
        <function-ref name="get" scoped="" ref="0x404727a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40472888"/>
        <function-ref name="set" scoped="" ref="0x40472968"/>
        <function-ref name="clr" scoped="" ref="0x40472a48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40471f28" loc="48:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40471f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40470110"/>
        <function-ref name="isInput" scoped="" ref="0x404701f0"/>
        <function-ref name="toggle" scoped="" ref="0x404702d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404703b0"/>
        <function-ref name="get" scoped="" ref="0x40470490"/>
        <function-ref name="makeOutput" scoped="" ref="0x40470570"/>
        <function-ref name="set" scoped="" ref="0x40470650"/>
        <function-ref name="clr" scoped="" ref="0x40470730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4046fba8" loc="51:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4046fba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4046fd80"/>
        <function-ref name="isInput" scoped="" ref="0x4046fe60"/>
        <function-ref name="toggle" scoped="" ref="0x40477010"/>
        <function-ref name="isOutput" scoped="" ref="0x404770f0"/>
        <function-ref name="get" scoped="" ref="0x404771d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404772b0"/>
        <function-ref name="set" scoped="" ref="0x40477390"/>
        <function-ref name="clr" scoped="" ref="0x40477470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40dfa938" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40dfa938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40dfab10"/>
        <function-ref name="isInput" scoped="" ref="0x40dfabf0"/>
        <function-ref name="toggle" scoped="" ref="0x40dfacd0"/>
        <function-ref name="isOutput" scoped="" ref="0x40dfadb0"/>
        <function-ref name="get" scoped="" ref="0x40dfae90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40df9010"/>
        <function-ref name="set" scoped="" ref="0x40df90f0"/>
        <function-ref name="clr" scoped="" ref="0x40df91d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40df83b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40df83b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40df8588"/>
        <function-ref name="isInput" scoped="" ref="0x40df8668"/>
        <function-ref name="toggle" scoped="" ref="0x40df8748"/>
        <function-ref name="isOutput" scoped="" ref="0x40df8828"/>
        <function-ref name="get" scoped="" ref="0x40df8908"/>
        <function-ref name="makeOutput" scoped="" ref="0x40df89e8"/>
        <function-ref name="set" scoped="" ref="0x40df8ac8"/>
        <function-ref name="clr" scoped="" ref="0x40df8ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40df7d70" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40df7d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40df6010"/>
        <function-ref name="isInput" scoped="" ref="0x40df60f0"/>
        <function-ref name="toggle" scoped="" ref="0x40df61d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40df62b0"/>
        <function-ref name="get" scoped="" ref="0x40df6390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40df6470"/>
        <function-ref name="set" scoped="" ref="0x40df6550"/>
        <function-ref name="clr" scoped="" ref="0x40df6630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40df57f8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40df57f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40df59d0"/>
        <function-ref name="isInput" scoped="" ref="0x40df5ab0"/>
        <function-ref name="toggle" scoped="" ref="0x40df5b90"/>
        <function-ref name="isOutput" scoped="" ref="0x40df5c70"/>
        <function-ref name="get" scoped="" ref="0x40df5d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40df5e30"/>
        <function-ref name="set" scoped="" ref="0x40df5f10"/>
        <function-ref name="clr" scoped="" ref="0x40df4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40df3228" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40df3228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40df3400"/>
        <function-ref name="isInput" scoped="" ref="0x40df34e0"/>
        <function-ref name="toggle" scoped="" ref="0x40df35c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40df36a0"/>
        <function-ref name="get" scoped="" ref="0x40df3780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40df3860"/>
        <function-ref name="set" scoped="" ref="0x40df3940"/>
        <function-ref name="clr" scoped="" ref="0x40df3a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40df2c08" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40df2c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40df2de0"/>
        <function-ref name="isInput" scoped="" ref="0x40df2ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40df1010"/>
        <function-ref name="isOutput" scoped="" ref="0x40df10f0"/>
        <function-ref name="get" scoped="" ref="0x40df11d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40df12b0"/>
        <function-ref name="set" scoped="" ref="0x40df1390"/>
        <function-ref name="clr" scoped="" ref="0x40df1470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40df06c0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40df06c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40df0898"/>
        <function-ref name="isInput" scoped="" ref="0x40df0978"/>
        <function-ref name="toggle" scoped="" ref="0x40df0a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40df0b38"/>
        <function-ref name="get" scoped="" ref="0x40df0c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40df0cf8"/>
        <function-ref name="set" scoped="" ref="0x40df0dd8"/>
        <function-ref name="clr" scoped="" ref="0x40df0eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ded0b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ded0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ded288"/>
        <function-ref name="isInput" scoped="" ref="0x40ded368"/>
        <function-ref name="toggle" scoped="" ref="0x40ded448"/>
        <function-ref name="isOutput" scoped="" ref="0x40ded528"/>
        <function-ref name="get" scoped="" ref="0x40ded608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ded6e8"/>
        <function-ref name="set" scoped="" ref="0x40ded7c8"/>
        <function-ref name="clr" scoped="" ref="0x40ded8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404734f0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404734f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404736c8"/>
        <function-ref name="isInput" scoped="" ref="0x404737a8"/>
        <function-ref name="toggle" scoped="" ref="0x40473888"/>
        <function-ref name="isOutput" scoped="" ref="0x40473968"/>
        <function-ref name="get" scoped="" ref="0x40473a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40473b28"/>
        <function-ref name="set" scoped="" ref="0x40473c08"/>
        <function-ref name="clr" scoped="" ref="0x40473ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4047b170" loc="49:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4047b170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047b348"/>
        <function-ref name="isInput" scoped="" ref="0x4047b428"/>
        <function-ref name="toggle" scoped="" ref="0x4047b508"/>
        <function-ref name="isOutput" scoped="" ref="0x4047b5e8"/>
        <function-ref name="get" scoped="" ref="0x4047b6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047b7a8"/>
        <function-ref name="set" scoped="" ref="0x4047b888"/>
        <function-ref name="clr" scoped="" ref="0x4047b968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40474228" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40474228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40474400"/>
        <function-ref name="isInput" scoped="" ref="0x404744e0"/>
        <function-ref name="toggle" scoped="" ref="0x404745c0"/>
        <function-ref name="isOutput" scoped="" ref="0x404746a0"/>
        <function-ref name="get" scoped="" ref="0x40474780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40474860"/>
        <function-ref name="set" scoped="" ref="0x40474940"/>
        <function-ref name="clr" scoped="" ref="0x40474a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40473e48" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40473e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047c050"/>
        <function-ref name="isInput" scoped="" ref="0x4047c130"/>
        <function-ref name="toggle" scoped="" ref="0x4047c210"/>
        <function-ref name="isOutput" scoped="" ref="0x4047c2f0"/>
        <function-ref name="get" scoped="" ref="0x4047c3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047c4b0"/>
        <function-ref name="set" scoped="" ref="0x4047c590"/>
        <function-ref name="clr" scoped="" ref="0x4047c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4047bac8" loc="50:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4047bac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047bca0"/>
        <function-ref name="isInput" scoped="" ref="0x4047bd80"/>
        <function-ref name="toggle" scoped="" ref="0x4047be60"/>
        <function-ref name="isOutput" scoped="" ref="0x4047a010"/>
        <function-ref name="get" scoped="" ref="0x4047a0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047a1d0"/>
        <function-ref name="set" scoped="" ref="0x4047a2b0"/>
        <function-ref name="clr" scoped="" ref="0x4047a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40474b80" loc="45:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40474b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40474d58"/>
        <function-ref name="isInput" scoped="" ref="0x40474e38"/>
        <function-ref name="toggle" scoped="" ref="0x40474f18"/>
        <function-ref name="isOutput" scoped="" ref="0x40473010"/>
        <function-ref name="get" scoped="" ref="0x404730f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404731d0"/>
        <function-ref name="set" scoped="" ref="0x404732b0"/>
        <function-ref name="clr" scoped="" ref="0x40473390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x4047c7d0" loc="48:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x4047c7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047c9a8"/>
        <function-ref name="isInput" scoped="" ref="0x4047ca88"/>
        <function-ref name="toggle" scoped="" ref="0x4047cb68"/>
        <function-ref name="isOutput" scoped="" ref="0x4047cc48"/>
        <function-ref name="get" scoped="" ref="0x4047cd28"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047ce08"/>
        <function-ref name="set" scoped="" ref="0x4047cee8"/>
        <function-ref name="clr" scoped="" ref="0x4047b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4047a4f0" loc="51:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4047a4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047a6c8"/>
        <function-ref name="isInput" scoped="" ref="0x4047a7a8"/>
        <function-ref name="toggle" scoped="" ref="0x4047a888"/>
        <function-ref name="isOutput" scoped="" ref="0x4047a968"/>
        <function-ref name="get" scoped="" ref="0x4047aa48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047ab28"/>
        <function-ref name="set" scoped="" ref="0x4047ac08"/>
        <function-ref name="clr" scoped="" ref="0x4047ace8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e24538" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e24538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e24710"/>
        <function-ref name="isInput" scoped="" ref="0x40e247f0"/>
        <function-ref name="toggle" scoped="" ref="0x40e248d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40e249b0"/>
        <function-ref name="get" scoped="" ref="0x40e24a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e24b70"/>
        <function-ref name="set" scoped="" ref="0x40e24c50"/>
        <function-ref name="clr" scoped="" ref="0x40e24d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e22010" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e22010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e221e8"/>
        <function-ref name="isInput" scoped="" ref="0x40e222c8"/>
        <function-ref name="toggle" scoped="" ref="0x40e223a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40e22488"/>
        <function-ref name="get" scoped="" ref="0x40e22568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e22648"/>
        <function-ref name="set" scoped="" ref="0x40e22728"/>
        <function-ref name="clr" scoped="" ref="0x40e22808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e219e8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e219e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e21bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40e21ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40e21d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40e21e60"/>
        <function-ref name="get" scoped="" ref="0x40e20010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e200f0"/>
        <function-ref name="set" scoped="" ref="0x40e201d0"/>
        <function-ref name="clr" scoped="" ref="0x40e202b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e1f538" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e1f538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e1f710"/>
        <function-ref name="isInput" scoped="" ref="0x40e1f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40e1f8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40e1f9b0"/>
        <function-ref name="get" scoped="" ref="0x40e1fa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e1fb70"/>
        <function-ref name="set" scoped="" ref="0x40e1fc50"/>
        <function-ref name="clr" scoped="" ref="0x40e1fd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e1d010" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e1d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e1d1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40e1d2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40e1d3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40e1d488"/>
        <function-ref name="get" scoped="" ref="0x40e1d568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e1d648"/>
        <function-ref name="set" scoped="" ref="0x40e1d728"/>
        <function-ref name="clr" scoped="" ref="0x40e1d808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e1c9e8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e1c9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e1cbc0"/>
        <function-ref name="isInput" scoped="" ref="0x40e1cca0"/>
        <function-ref name="toggle" scoped="" ref="0x40e1cd80"/>
        <function-ref name="isOutput" scoped="" ref="0x40e1ce60"/>
        <function-ref name="get" scoped="" ref="0x40e1b010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e1b0f0"/>
        <function-ref name="set" scoped="" ref="0x40e1b1d0"/>
        <function-ref name="clr" scoped="" ref="0x40e1b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e1a538" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e1a538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e1a710"/>
        <function-ref name="isInput" scoped="" ref="0x40e1a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40e1a8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40e1a9b0"/>
        <function-ref name="get" scoped="" ref="0x40e1aa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e1ab70"/>
        <function-ref name="set" scoped="" ref="0x40e1ac50"/>
        <function-ref name="clr" scoped="" ref="0x40e1ad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e18010" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e18010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e181e8"/>
        <function-ref name="isInput" scoped="" ref="0x40e182c8"/>
        <function-ref name="toggle" scoped="" ref="0x40e183a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40e18488"/>
        <function-ref name="get" scoped="" ref="0x40e18568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e18648"/>
        <function-ref name="set" scoped="" ref="0x40e18728"/>
        <function-ref name="clr" scoped="" ref="0x40e18808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40480e48" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40480e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047f050"/>
        <function-ref name="isInput" scoped="" ref="0x4047f130"/>
        <function-ref name="toggle" scoped="" ref="0x4047f210"/>
        <function-ref name="isOutput" scoped="" ref="0x4047f2f0"/>
        <function-ref name="get" scoped="" ref="0x4047f3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047f4b0"/>
        <function-ref name="set" scoped="" ref="0x4047f590"/>
        <function-ref name="clr" scoped="" ref="0x4047f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4047eac8" loc="49:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4047eac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047eca0"/>
        <function-ref name="isInput" scoped="" ref="0x4047ed80"/>
        <function-ref name="toggle" scoped="" ref="0x4047ee60"/>
        <function-ref name="isOutput" scoped="" ref="0x4047d010"/>
        <function-ref name="get" scoped="" ref="0x4047d0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047d1d0"/>
        <function-ref name="set" scoped="" ref="0x4047d2b0"/>
        <function-ref name="clr" scoped="" ref="0x4047d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40481b00" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40481b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40481cd8"/>
        <function-ref name="isInput" scoped="" ref="0x40481db8"/>
        <function-ref name="toggle" scoped="" ref="0x40481e98"/>
        <function-ref name="isOutput" scoped="" ref="0x40480010"/>
        <function-ref name="get" scoped="" ref="0x404800f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404801d0"/>
        <function-ref name="set" scoped="" ref="0x404802b0"/>
        <function-ref name="clr" scoped="" ref="0x40480390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4047f7d0" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4047f7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047f9a8"/>
        <function-ref name="isInput" scoped="" ref="0x4047fa88"/>
        <function-ref name="toggle" scoped="" ref="0x4047fb68"/>
        <function-ref name="isOutput" scoped="" ref="0x4047fc48"/>
        <function-ref name="get" scoped="" ref="0x4047fd28"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047fe08"/>
        <function-ref name="set" scoped="" ref="0x4047fee8"/>
        <function-ref name="clr" scoped="" ref="0x4047e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4047d4f0" loc="50:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4047d4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047d6c8"/>
        <function-ref name="isInput" scoped="" ref="0x4047d7a8"/>
        <function-ref name="toggle" scoped="" ref="0x4047d888"/>
        <function-ref name="isOutput" scoped="" ref="0x4047d968"/>
        <function-ref name="get" scoped="" ref="0x4047da48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047db28"/>
        <function-ref name="set" scoped="" ref="0x4047dc08"/>
        <function-ref name="clr" scoped="" ref="0x4047dce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x404804f0" loc="45:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x404804f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404806c8"/>
        <function-ref name="isInput" scoped="" ref="0x404807a8"/>
        <function-ref name="toggle" scoped="" ref="0x40480888"/>
        <function-ref name="isOutput" scoped="" ref="0x40480968"/>
        <function-ref name="get" scoped="" ref="0x40480a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40480b28"/>
        <function-ref name="set" scoped="" ref="0x40480c08"/>
        <function-ref name="clr" scoped="" ref="0x40480ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x4047e170" loc="48:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x4047e170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047e348"/>
        <function-ref name="isInput" scoped="" ref="0x4047e428"/>
        <function-ref name="toggle" scoped="" ref="0x4047e508"/>
        <function-ref name="isOutput" scoped="" ref="0x4047e5e8"/>
        <function-ref name="get" scoped="" ref="0x4047e6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047e7a8"/>
        <function-ref name="set" scoped="" ref="0x4047e888"/>
        <function-ref name="clr" scoped="" ref="0x4047e968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4047de48" loc="51:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4047de48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40488050"/>
        <function-ref name="isInput" scoped="" ref="0x40488130"/>
        <function-ref name="toggle" scoped="" ref="0x40488210"/>
        <function-ref name="isOutput" scoped="" ref="0x404882f0"/>
        <function-ref name="get" scoped="" ref="0x404883d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404884b0"/>
        <function-ref name="set" scoped="" ref="0x40488590"/>
        <function-ref name="clr" scoped="" ref="0x40488670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e50418" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e50418"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e505f0"/>
        <function-ref name="isInput" scoped="" ref="0x40e506d0"/>
        <function-ref name="toggle" scoped="" ref="0x40e507b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40e50890"/>
        <function-ref name="get" scoped="" ref="0x40e50970"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e50a50"/>
        <function-ref name="set" scoped="" ref="0x40e50b30"/>
        <function-ref name="clr" scoped="" ref="0x40e50c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e4fde0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e4fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e4e010"/>
        <function-ref name="isInput" scoped="" ref="0x40e4e0f0"/>
        <function-ref name="toggle" scoped="" ref="0x40e4e1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40e4e2b0"/>
        <function-ref name="get" scoped="" ref="0x40e4e390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e4e470"/>
        <function-ref name="set" scoped="" ref="0x40e4e550"/>
        <function-ref name="clr" scoped="" ref="0x40e4e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e4d7f8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e4d7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e4d9d0"/>
        <function-ref name="isInput" scoped="" ref="0x40e4dab0"/>
        <function-ref name="toggle" scoped="" ref="0x40e4db90"/>
        <function-ref name="isOutput" scoped="" ref="0x40e4dc70"/>
        <function-ref name="get" scoped="" ref="0x40e4dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e4de30"/>
        <function-ref name="set" scoped="" ref="0x40e4df10"/>
        <function-ref name="clr" scoped="" ref="0x40e4c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e4b228" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e4b228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e4b400"/>
        <function-ref name="isInput" scoped="" ref="0x40e4b4e0"/>
        <function-ref name="toggle" scoped="" ref="0x40e4b5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40e4b6a0"/>
        <function-ref name="get" scoped="" ref="0x40e4b780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e4b860"/>
        <function-ref name="set" scoped="" ref="0x40e4b940"/>
        <function-ref name="clr" scoped="" ref="0x40e4ba20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e4ac08" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e4ac08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e4ade0"/>
        <function-ref name="isInput" scoped="" ref="0x40e4aec0"/>
        <function-ref name="toggle" scoped="" ref="0x40e7b010"/>
        <function-ref name="isOutput" scoped="" ref="0x40e7b0f0"/>
        <function-ref name="get" scoped="" ref="0x40e7b1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e7b2b0"/>
        <function-ref name="set" scoped="" ref="0x40e7b390"/>
        <function-ref name="clr" scoped="" ref="0x40e7b470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e7a6c0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e7a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e7a898"/>
        <function-ref name="isInput" scoped="" ref="0x40e7a978"/>
        <function-ref name="toggle" scoped="" ref="0x40e7aa58"/>
        <function-ref name="isOutput" scoped="" ref="0x40e7ab38"/>
        <function-ref name="get" scoped="" ref="0x40e7ac18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e7acf8"/>
        <function-ref name="set" scoped="" ref="0x40e7add8"/>
        <function-ref name="clr" scoped="" ref="0x40e7aeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e770b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e770b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e77288"/>
        <function-ref name="isInput" scoped="" ref="0x40e77368"/>
        <function-ref name="toggle" scoped="" ref="0x40e77448"/>
        <function-ref name="isOutput" scoped="" ref="0x40e77528"/>
        <function-ref name="get" scoped="" ref="0x40e77608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e776e8"/>
        <function-ref name="set" scoped="" ref="0x40e777c8"/>
        <function-ref name="clr" scoped="" ref="0x40e778a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e76a88" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e76a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e76c60"/>
        <function-ref name="isInput" scoped="" ref="0x40e76d40"/>
        <function-ref name="toggle" scoped="" ref="0x40e76e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40e76f00"/>
        <function-ref name="get" scoped="" ref="0x40e75010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e750f0"/>
        <function-ref name="set" scoped="" ref="0x40e751d0"/>
        <function-ref name="clr" scoped="" ref="0x40e752b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404836b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404836b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40483888"/>
        <function-ref name="isInput" scoped="" ref="0x40483968"/>
        <function-ref name="toggle" scoped="" ref="0x40483a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40483b28"/>
        <function-ref name="get" scoped="" ref="0x40483c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40483ce8"/>
        <function-ref name="set" scoped="" ref="0x40483dc8"/>
        <function-ref name="clr" scoped="" ref="0x40483ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4048d330" loc="49:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4048d330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048d508"/>
        <function-ref name="isInput" scoped="" ref="0x4048d5e8"/>
        <function-ref name="toggle" scoped="" ref="0x4048d6c8"/>
        <function-ref name="isOutput" scoped="" ref="0x4048d7a8"/>
        <function-ref name="get" scoped="" ref="0x4048d888"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048d968"/>
        <function-ref name="set" scoped="" ref="0x4048da48"/>
        <function-ref name="clr" scoped="" ref="0x4048db28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x404853d8" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x404853d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404855b0"/>
        <function-ref name="isInput" scoped="" ref="0x40485690"/>
        <function-ref name="toggle" scoped="" ref="0x40485770"/>
        <function-ref name="isOutput" scoped="" ref="0x40485850"/>
        <function-ref name="get" scoped="" ref="0x40485930"/>
        <function-ref name="makeOutput" scoped="" ref="0x40485a10"/>
        <function-ref name="set" scoped="" ref="0x40485af0"/>
        <function-ref name="clr" scoped="" ref="0x40485bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4048e030" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4048e030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048e208"/>
        <function-ref name="isInput" scoped="" ref="0x4048e2e8"/>
        <function-ref name="toggle" scoped="" ref="0x4048e3c8"/>
        <function-ref name="isOutput" scoped="" ref="0x4048e4a8"/>
        <function-ref name="get" scoped="" ref="0x4048e588"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048e668"/>
        <function-ref name="set" scoped="" ref="0x4048e748"/>
        <function-ref name="clr" scoped="" ref="0x4048e828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4048dc88" loc="50:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4048dc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048de60"/>
        <function-ref name="isInput" scoped="" ref="0x4048c010"/>
        <function-ref name="toggle" scoped="" ref="0x4048c0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4048c1d0"/>
        <function-ref name="get" scoped="" ref="0x4048c2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048c390"/>
        <function-ref name="set" scoped="" ref="0x4048c470"/>
        <function-ref name="clr" scoped="" ref="0x4048c550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40485d30" loc="45:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40485d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40485f08"/>
        <function-ref name="isInput" scoped="" ref="0x40483010"/>
        <function-ref name="toggle" scoped="" ref="0x404830f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404831d0"/>
        <function-ref name="get" scoped="" ref="0x404832b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40483390"/>
        <function-ref name="set" scoped="" ref="0x40483470"/>
        <function-ref name="clr" scoped="" ref="0x40483550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x4048e988" loc="48:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x4048e988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048eb60"/>
        <function-ref name="isInput" scoped="" ref="0x4048ec40"/>
        <function-ref name="toggle" scoped="" ref="0x4048ed20"/>
        <function-ref name="isOutput" scoped="" ref="0x4048ee00"/>
        <function-ref name="get" scoped="" ref="0x4048eee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048d010"/>
        <function-ref name="set" scoped="" ref="0x4048d0f0"/>
        <function-ref name="clr" scoped="" ref="0x4048d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4048c6b0" loc="51:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4048c6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048c888"/>
        <function-ref name="isInput" scoped="" ref="0x4048c968"/>
        <function-ref name="toggle" scoped="" ref="0x4048ca48"/>
        <function-ref name="isOutput" scoped="" ref="0x4048cb28"/>
        <function-ref name="get" scoped="" ref="0x4048cc08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048cce8"/>
        <function-ref name="set" scoped="" ref="0x4048cdc8"/>
        <function-ref name="clr" scoped="" ref="0x4048cea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40e80de8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40e80de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40e7c010"/>
        <function-ref name="isInput" scoped="" ref="0x40e7c0f0"/>
        <function-ref name="toggle" scoped="" ref="0x40e7c1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40e7c2b0"/>
        <function-ref name="get" scoped="" ref="0x40e7c390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40e7c470"/>
        <function-ref name="set" scoped="" ref="0x40e7c550"/>
        <function-ref name="clr" scoped="" ref="0x40e7c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40eaf7f8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40eaf7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40eaf9d0"/>
        <function-ref name="isInput" scoped="" ref="0x40eafab0"/>
        <function-ref name="toggle" scoped="" ref="0x40eafb90"/>
        <function-ref name="isOutput" scoped="" ref="0x40eafc70"/>
        <function-ref name="get" scoped="" ref="0x40eafd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40eafe30"/>
        <function-ref name="set" scoped="" ref="0x40eaff10"/>
        <function-ref name="clr" scoped="" ref="0x40eae010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ead228" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ead228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ead400"/>
        <function-ref name="isInput" scoped="" ref="0x40ead4e0"/>
        <function-ref name="toggle" scoped="" ref="0x40ead5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ead6a0"/>
        <function-ref name="get" scoped="" ref="0x40ead780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ead860"/>
        <function-ref name="set" scoped="" ref="0x40ead940"/>
        <function-ref name="clr" scoped="" ref="0x40eada20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40eacc08" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40eacc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40eacde0"/>
        <function-ref name="isInput" scoped="" ref="0x40eacec0"/>
        <function-ref name="toggle" scoped="" ref="0x40eab010"/>
        <function-ref name="isOutput" scoped="" ref="0x40eab0f0"/>
        <function-ref name="get" scoped="" ref="0x40eab1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40eab2b0"/>
        <function-ref name="set" scoped="" ref="0x40eab390"/>
        <function-ref name="clr" scoped="" ref="0x40eab470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40eaa6c0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40eaa6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40eaa898"/>
        <function-ref name="isInput" scoped="" ref="0x40eaa978"/>
        <function-ref name="toggle" scoped="" ref="0x40eaaa58"/>
        <function-ref name="isOutput" scoped="" ref="0x40eaab38"/>
        <function-ref name="get" scoped="" ref="0x40eaac18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40eaacf8"/>
        <function-ref name="set" scoped="" ref="0x40eaadd8"/>
        <function-ref name="clr" scoped="" ref="0x40eaaeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ea80b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ea80b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ea8288"/>
        <function-ref name="isInput" scoped="" ref="0x40ea8368"/>
        <function-ref name="toggle" scoped="" ref="0x40ea8448"/>
        <function-ref name="isOutput" scoped="" ref="0x40ea8528"/>
        <function-ref name="get" scoped="" ref="0x40ea8608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ea86e8"/>
        <function-ref name="set" scoped="" ref="0x40ea87c8"/>
        <function-ref name="clr" scoped="" ref="0x40ea88a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ea7a88" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ea7a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ea7c60"/>
        <function-ref name="isInput" scoped="" ref="0x40ea7d40"/>
        <function-ref name="toggle" scoped="" ref="0x40ea7e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40ea7f00"/>
        <function-ref name="get" scoped="" ref="0x40ea6010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ea60f0"/>
        <function-ref name="set" scoped="" ref="0x40ea61d0"/>
        <function-ref name="clr" scoped="" ref="0x40ea62b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ea5538" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ea5538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ea5710"/>
        <function-ref name="isInput" scoped="" ref="0x40ea57f0"/>
        <function-ref name="toggle" scoped="" ref="0x40ea58d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ea59b0"/>
        <function-ref name="get" scoped="" ref="0x40ea5a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ea5b70"/>
        <function-ref name="set" scoped="" ref="0x40ea5c50"/>
        <function-ref name="clr" scoped="" ref="0x40ea5d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40494f28" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40494f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40493110"/>
        <function-ref name="isInput" scoped="" ref="0x404931f0"/>
        <function-ref name="toggle" scoped="" ref="0x404932d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404933b0"/>
        <function-ref name="get" scoped="" ref="0x40493490"/>
        <function-ref name="makeOutput" scoped="" ref="0x40493570"/>
        <function-ref name="set" scoped="" ref="0x40493650"/>
        <function-ref name="clr" scoped="" ref="0x40493730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40492ba8" loc="49:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40492ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40492d80"/>
        <function-ref name="isInput" scoped="" ref="0x40492e60"/>
        <function-ref name="toggle" scoped="" ref="0x40491010"/>
        <function-ref name="isOutput" scoped="" ref="0x404910f0"/>
        <function-ref name="get" scoped="" ref="0x404911d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404912b0"/>
        <function-ref name="set" scoped="" ref="0x40491390"/>
        <function-ref name="clr" scoped="" ref="0x40491470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40489c28" loc="44:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40489c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40489e00"/>
        <function-ref name="isInput" scoped="" ref="0x40489ee0"/>
        <function-ref name="toggle" scoped="" ref="0x40494010"/>
        <function-ref name="isOutput" scoped="" ref="0x404940f0"/>
        <function-ref name="get" scoped="" ref="0x404941d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404942b0"/>
        <function-ref name="set" scoped="" ref="0x40494390"/>
        <function-ref name="clr" scoped="" ref="0x40494470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40493890" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40493890"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40493a68"/>
        <function-ref name="isInput" scoped="" ref="0x40493b48"/>
        <function-ref name="toggle" scoped="" ref="0x40493c28"/>
        <function-ref name="isOutput" scoped="" ref="0x40493d08"/>
        <function-ref name="get" scoped="" ref="0x40493de8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40493ec8"/>
        <function-ref name="set" scoped="" ref="0x40492010"/>
        <function-ref name="clr" scoped="" ref="0x404920f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x404915d0" loc="50:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x404915d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404917a8"/>
        <function-ref name="isInput" scoped="" ref="0x40491888"/>
        <function-ref name="toggle" scoped="" ref="0x40491968"/>
        <function-ref name="isOutput" scoped="" ref="0x40491a48"/>
        <function-ref name="get" scoped="" ref="0x40491b28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40491c08"/>
        <function-ref name="set" scoped="" ref="0x40491ce8"/>
        <function-ref name="clr" scoped="" ref="0x40491dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x404945d0" loc="45:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x404945d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404947a8"/>
        <function-ref name="isInput" scoped="" ref="0x40494888"/>
        <function-ref name="toggle" scoped="" ref="0x40494968"/>
        <function-ref name="isOutput" scoped="" ref="0x40494a48"/>
        <function-ref name="get" scoped="" ref="0x40494b28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40494c08"/>
        <function-ref name="set" scoped="" ref="0x40494ce8"/>
        <function-ref name="clr" scoped="" ref="0x40494dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40492250" loc="48:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40492250"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40492428"/>
        <function-ref name="isInput" scoped="" ref="0x40492508"/>
        <function-ref name="toggle" scoped="" ref="0x404925e8"/>
        <function-ref name="isOutput" scoped="" ref="0x404926c8"/>
        <function-ref name="get" scoped="" ref="0x404927a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40492888"/>
        <function-ref name="set" scoped="" ref="0x40492968"/>
        <function-ref name="clr" scoped="" ref="0x40492a48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40491f28" loc="51:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40491f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048f110"/>
        <function-ref name="isInput" scoped="" ref="0x4048f1f0"/>
        <function-ref name="toggle" scoped="" ref="0x4048f2d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4048f3b0"/>
        <function-ref name="get" scoped="" ref="0x4048f490"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048f570"/>
        <function-ref name="set" scoped="" ref="0x4048f650"/>
        <function-ref name="clr" scoped="" ref="0x4048f730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ee1938" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ee1938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ee1b10"/>
        <function-ref name="isInput" scoped="" ref="0x40ee1bf0"/>
        <function-ref name="toggle" scoped="" ref="0x40ee1cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ee1db0"/>
        <function-ref name="get" scoped="" ref="0x40ee1e90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ee0010"/>
        <function-ref name="set" scoped="" ref="0x40ee00f0"/>
        <function-ref name="clr" scoped="" ref="0x40ee01d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40edf3b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40edf3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40edf588"/>
        <function-ref name="isInput" scoped="" ref="0x40edf668"/>
        <function-ref name="toggle" scoped="" ref="0x40edf748"/>
        <function-ref name="isOutput" scoped="" ref="0x40edf828"/>
        <function-ref name="get" scoped="" ref="0x40edf908"/>
        <function-ref name="makeOutput" scoped="" ref="0x40edf9e8"/>
        <function-ref name="set" scoped="" ref="0x40edfac8"/>
        <function-ref name="clr" scoped="" ref="0x40edfba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40eded70" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40eded70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40edd010"/>
        <function-ref name="isInput" scoped="" ref="0x40edd0f0"/>
        <function-ref name="toggle" scoped="" ref="0x40edd1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40edd2b0"/>
        <function-ref name="get" scoped="" ref="0x40edd390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40edd470"/>
        <function-ref name="set" scoped="" ref="0x40edd550"/>
        <function-ref name="clr" scoped="" ref="0x40edd630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40edc7f8" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40edc7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40edc9d0"/>
        <function-ref name="isInput" scoped="" ref="0x40edcab0"/>
        <function-ref name="toggle" scoped="" ref="0x40edcb90"/>
        <function-ref name="isOutput" scoped="" ref="0x40edcc70"/>
        <function-ref name="get" scoped="" ref="0x40edcd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40edce30"/>
        <function-ref name="set" scoped="" ref="0x40edcf10"/>
        <function-ref name="clr" scoped="" ref="0x40eda010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ed9228" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ed9228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ed9400"/>
        <function-ref name="isInput" scoped="" ref="0x40ed94e0"/>
        <function-ref name="toggle" scoped="" ref="0x40ed95c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ed96a0"/>
        <function-ref name="get" scoped="" ref="0x40ed9780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ed9860"/>
        <function-ref name="set" scoped="" ref="0x40ed9940"/>
        <function-ref name="clr" scoped="" ref="0x40ed9a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ed8c08" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ed8c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ed8de0"/>
        <function-ref name="isInput" scoped="" ref="0x40ed8ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40ed7010"/>
        <function-ref name="isOutput" scoped="" ref="0x40ed70f0"/>
        <function-ref name="get" scoped="" ref="0x40ed71d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ed72b0"/>
        <function-ref name="set" scoped="" ref="0x40ed7390"/>
        <function-ref name="clr" scoped="" ref="0x40ed7470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ed66c0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ed66c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ed6898"/>
        <function-ref name="isInput" scoped="" ref="0x40ed6978"/>
        <function-ref name="toggle" scoped="" ref="0x40ed6a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40ed6b38"/>
        <function-ref name="get" scoped="" ref="0x40ed6c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ed6cf8"/>
        <function-ref name="set" scoped="" ref="0x40ed6dd8"/>
        <function-ref name="clr" scoped="" ref="0x40ed6eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ed40b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ed40b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ed4288"/>
        <function-ref name="isInput" scoped="" ref="0x40ed4368"/>
        <function-ref name="toggle" scoped="" ref="0x40ed4448"/>
        <function-ref name="isOutput" scoped="" ref="0x40ed4528"/>
        <function-ref name="get" scoped="" ref="0x40ed4608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ed46e8"/>
        <function-ref name="set" scoped="" ref="0x40ed47c8"/>
        <function-ref name="clr" scoped="" ref="0x40ed48a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40498e60" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40498e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40497050"/>
        <function-ref name="isInput" scoped="" ref="0x40497130"/>
        <function-ref name="toggle" scoped="" ref="0x40497210"/>
        <function-ref name="isOutput" scoped="" ref="0x404972f0"/>
        <function-ref name="get" scoped="" ref="0x404973d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404974b0"/>
        <function-ref name="set" scoped="" ref="0x40497590"/>
        <function-ref name="clr" scoped="" ref="0x40497670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404a1458" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404a1458"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404a1630"/>
        <function-ref name="isInput" scoped="" ref="0x404a1710"/>
        <function-ref name="toggle" scoped="" ref="0x404a17f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404a18d0"/>
        <function-ref name="get" scoped="" ref="0x404a19b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a1a90"/>
        <function-ref name="set" scoped="" ref="0x404a1b70"/>
        <function-ref name="clr" scoped="" ref="0x404a1c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404aba30" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404aba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404abc08"/>
        <function-ref name="isInput" scoped="" ref="0x404abce8"/>
        <function-ref name="toggle" scoped="" ref="0x404abdc8"/>
        <function-ref name="isOutput" scoped="" ref="0x404abea8"/>
        <function-ref name="get" scoped="" ref="0x404aa010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404aa0f0"/>
        <function-ref name="set" scoped="" ref="0x404aa1d0"/>
        <function-ref name="clr" scoped="" ref="0x404aa2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404a7090" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404a7090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404a7268"/>
        <function-ref name="isInput" scoped="" ref="0x404a7348"/>
        <function-ref name="toggle" scoped="" ref="0x404a7428"/>
        <function-ref name="isOutput" scoped="" ref="0x404a7508"/>
        <function-ref name="get" scoped="" ref="0x404a75e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a76c8"/>
        <function-ref name="set" scoped="" ref="0x404a77a8"/>
        <function-ref name="clr" scoped="" ref="0x404a7888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404b16c0" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404b16c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b1898"/>
        <function-ref name="isInput" scoped="" ref="0x404b1978"/>
        <function-ref name="toggle" scoped="" ref="0x404b1a58"/>
        <function-ref name="isOutput" scoped="" ref="0x404b1b38"/>
        <function-ref name="get" scoped="" ref="0x404b1c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b1cf8"/>
        <function-ref name="set" scoped="" ref="0x404b1dd8"/>
        <function-ref name="clr" scoped="" ref="0x404b1eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404aecb8" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404aecb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404aee90"/>
        <function-ref name="isInput" scoped="" ref="0x404ad010"/>
        <function-ref name="toggle" scoped="" ref="0x404ad0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404ad1d0"/>
        <function-ref name="get" scoped="" ref="0x404ad2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ad390"/>
        <function-ref name="set" scoped="" ref="0x404ad470"/>
        <function-ref name="clr" scoped="" ref="0x404ad550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404b73b0" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404b73b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b7588"/>
        <function-ref name="isInput" scoped="" ref="0x404b7668"/>
        <function-ref name="toggle" scoped="" ref="0x404b7748"/>
        <function-ref name="isOutput" scoped="" ref="0x404b7828"/>
        <function-ref name="get" scoped="" ref="0x404b7908"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b79e8"/>
        <function-ref name="set" scoped="" ref="0x404b7ac8"/>
        <function-ref name="clr" scoped="" ref="0x404b7ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404b5978" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404b5978"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b5b50"/>
        <function-ref name="isInput" scoped="" ref="0x404b5c30"/>
        <function-ref name="toggle" scoped="" ref="0x404b5d10"/>
        <function-ref name="isOutput" scoped="" ref="0x404b5df0"/>
        <function-ref name="get" scoped="" ref="0x404b5ed0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b4010"/>
        <function-ref name="set" scoped="" ref="0x404b40f0"/>
        <function-ref name="clr" scoped="" ref="0x404b41d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404beee0" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404beee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bd0e0"/>
        <function-ref name="isInput" scoped="" ref="0x404bd1c0"/>
        <function-ref name="toggle" scoped="" ref="0x404bd2a0"/>
        <function-ref name="isOutput" scoped="" ref="0x404bd380"/>
        <function-ref name="get" scoped="" ref="0x404bd460"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bd540"/>
        <function-ref name="set" scoped="" ref="0x404bd620"/>
        <function-ref name="clr" scoped="" ref="0x404bd700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404bb3e8" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404bb3e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bb5c0"/>
        <function-ref name="isInput" scoped="" ref="0x404bb6a0"/>
        <function-ref name="toggle" scoped="" ref="0x404bb780"/>
        <function-ref name="isOutput" scoped="" ref="0x404bb860"/>
        <function-ref name="get" scoped="" ref="0x404bb940"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bba20"/>
        <function-ref name="set" scoped="" ref="0x404bbb00"/>
        <function-ref name="clr" scoped="" ref="0x404bbbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404b98f0" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404b98f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b9ac8"/>
        <function-ref name="isInput" scoped="" ref="0x404b9ba8"/>
        <function-ref name="toggle" scoped="" ref="0x404b9c88"/>
        <function-ref name="isOutput" scoped="" ref="0x404b9d68"/>
        <function-ref name="get" scoped="" ref="0x404b9e48"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b9f28"/>
        <function-ref name="set" scoped="" ref="0x404c3018"/>
        <function-ref name="clr" scoped="" ref="0x404c30f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404c2dd8" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404c2dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c1010"/>
        <function-ref name="isInput" scoped="" ref="0x404c10f0"/>
        <function-ref name="toggle" scoped="" ref="0x404c11d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404c12b0"/>
        <function-ref name="get" scoped="" ref="0x404c1390"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c1470"/>
        <function-ref name="set" scoped="" ref="0x404c1550"/>
        <function-ref name="clr" scoped="" ref="0x404c1630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404bf3b0" loc="47:/home/user/tinyos-main/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404bf3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bf588"/>
        <function-ref name="isInput" scoped="" ref="0x404bf668"/>
        <function-ref name="toggle" scoped="" ref="0x404bf748"/>
        <function-ref name="isOutput" scoped="" ref="0x404bf828"/>
        <function-ref name="get" scoped="" ref="0x404bf908"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bf9e8"/>
        <function-ref name="set" scoped="" ref="0x404bfac8"/>
        <function-ref name="clr" scoped="" ref="0x404bfba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404e5858" loc="27:/home/user/tinyos-main/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404e5858"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x4034f7d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x4034f7d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404e5a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x404e5c08" loc="28:/home/user/tinyos-main/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x404e5c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x404e5de0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x404e5ec0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x404e4010"/>
        <function-ref name="actualMicro" scoped="" ref="0x404e40f0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x404e41d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x404f6010" loc="60:/home/user/tinyos-main/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x404f6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404f61e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x404f71c8" loc="57:/home/user/tinyos-main/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x404f71c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x404f73a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x404f7b28" loc="59:/home/user/tinyos-main/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404f7b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404f7d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x404f7560" loc="58:/home/user/tinyos-main/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x404f7560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404f7738"/>
        <function-ref name="taskLoop" scoped="" ref="0x404f7818"/>
        <function-ref name="runNextTask" scoped="" ref="0x404f78f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x40358600" loc="48:/home/user/tinyos-main/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x40358600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x403587d8"/>
        <function-ref name="runTask" scoped="" ref="0x403588b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x40352ed8" loc="47:/home/user/tinyos-main/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x40352ed8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4034e0c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x4034e1a0"/>
        <function-ref name="runNextTask" scoped="" ref="0x4034e280"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x403cdd30" loc="56:/home/user/tinyos-main/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x403cdd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x403cdf08"/>
        <function-ref name="runTask" scoped="" ref="0x403cb010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x403cb9c0" loc="57:/home/user/tinyos-main/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x403cb9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x403cbb98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x403cd4f8" loc="55:/home/user/tinyos-main/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x403cd4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x403cd6d0"/>
        <function-ref name="taskLoop" scoped="" ref="0x403cd7b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x403cd890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x403e0f18" loc="54:/home/user/tinyos-main/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x403e0f18"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x403da108"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x403db438" loc="50:/home/user/tinyos-main/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x403db438"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x403db610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x403e0148" loc="51:/home/user/tinyos-main/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x403e0148"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x403e0320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PubKeyMsg" ref="0x40588d38" loc="19:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PubKeyMsg" scoped="" ref="0x40588d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40588f10"/>
        <function-ref name="getPayload" scoped="" ref="0x40541010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405410f0"/>
        <function-ref name="cancel" scoped="" ref="0x405411d0"/>
        <function-ref name="sendDone" scoped="" ref="0x405412b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x40408dd0" loc="11:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x40408dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x404fd010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40583bb0" loc="23:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x40583bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40583e08"/>
        <function-ref name="stopDone" scoped="" ref="0x40583ee8"/>
        <function-ref name="start" scoped="" ref="0x40586010"/>
        <function-ref name="stop" scoped="" ref="0x405860f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x405447f0" loc="16:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x405447f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40544e38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ECC" ref="0x40528010" loc="13:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ECC" scoped="" ref="0x40528010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ECC"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x405281e8"/>
        <function-ref name="point2octet" scoped="" ref="0x405282c8"/>
        <function-ref name="win_mul" scoped="" ref="0x405283a8"/>
        <function-ref name="gen_private_key" scoped="" ref="0x40528488"/>
        <function-ref name="win_mul_Z" scoped="" ref="0x40528568"/>
        <function-ref name="octet2point" scoped="" ref="0x40528648"/>
        <function-ref name="init" scoped="" ref="0x40528728"/>
        <function-ref name="add_proj" scoped="" ref="0x40528808"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x405288e8"/>
        <function-ref name="point_is_zero" scoped="" ref="0x405289c8"/>
        <function-ref name="mul" scoped="" ref="0x40528aa8"/>
        <function-ref name="dbl_proj" scoped="" ref="0x40528b88"/>
        <function-ref name="win_mul_base" scoped="" ref="0x40528c68"/>
        <function-ref name="check_point" scoped="" ref="0x40528dc8"/>
        <function-ref name="win_precompute_Z" scoped="" ref="0x40528ea8"/>
        <function-ref name="add" scoped="" ref="0x40527010"/>
        <function-ref name="gen_public_key" scoped="" ref="0x405270f0"/>
        <function-ref name="win_precompute" scoped="" ref="0x405271d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x40538d08" loc="17:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40538d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40538ee0"/>
        <function-ref name="rand32" scoped="" ref="0x40545010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="myTimer" ref="0x4053a770" loc="15:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="myTimer" scoped="" ref="0x4053a770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40539330"/>
        <function-ref name="fired" scoped="" ref="0x40534520"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40534c28"/>
        <function-ref name="isOneShot" scoped="" ref="0x405349d0"/>
        <function-ref name="getdt" scoped="" ref="0x405397e0"/>
        <function-ref name="gett0" scoped="" ref="0x40539588"/>
        <function-ref name="isRunning" scoped="" ref="0x40534778"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4053ad98"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40539010"/>
        <function-ref name="startOneShot" scoped="" ref="0x40534048"/>
        <function-ref name="stop" scoped="" ref="0x405342c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x404fc010" loc="12:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x404fc010"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x404fc1e8"/>
        <function-ref name="LShift" scoped="" ref="0x404fc2c8"/>
        <function-ref name="ModSmall" scoped="" ref="0x404fc3a8"/>
        <function-ref name="Gcd" scoped="" ref="0x404fc488"/>
        <function-ref name="ModExp" scoped="" ref="0x404fc568"/>
        <function-ref name="ModNeg" scoped="" ref="0x404fc648"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x404fc728"/>
        <function-ref name="ModBarrett" scoped="" ref="0x404fc808"/>
        <function-ref name="Digits" scoped="" ref="0x404fc8e8"/>
        <function-ref name="ModSub" scoped="" ref="0x404fc9c8"/>
        <function-ref name="ModDiv" scoped="" ref="0x404fcaa8"/>
        <function-ref name="Cmp" scoped="" ref="0x404fcb88"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x404fcc68"/>
        <function-ref name="AssignDigit" scoped="" ref="0x404fcdc8"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x404fcea8"/>
        <function-ref name="ModMult" scoped="" ref="0x404fb010"/>
        <function-ref name="Sub" scoped="" ref="0x404fb0f0"/>
        <function-ref name="Mult" scoped="" ref="0x404fb1d0"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x404fb2b0"/>
        <function-ref name="Assign" scoped="" ref="0x404fb390"/>
        <function-ref name="Decode" scoped="" ref="0x404fb470"/>
        <function-ref name="Encode" scoped="" ref="0x404fb550"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x404fb630"/>
        <function-ref name="Mod" scoped="" ref="0x404fb710"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x404fb7f0"/>
        <function-ref name="Div" scoped="" ref="0x404fb9d0"/>
        <function-ref name="Add" scoped="" ref="0x404fbab0"/>
        <function-ref name="ModAdd" scoped="" ref="0x404fbb90"/>
        <function-ref name="One" scoped="" ref="0x404fbc70"/>
        <function-ref name="Bits" scoped="" ref="0x404fbd50"/>
        <function-ref name="TestBit" scoped="" ref="0x404fbe30"/>
        <function-ref name="Equal" scoped="" ref="0x404fbf10"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40529010"/>
        <function-ref name="AssignZero" scoped="" ref="0x405290f0"/>
        <function-ref name="RShift" scoped="" ref="0x405291d0"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x405292b0"/>
        <function-ref name="ModInv" scoped="" ref="0x40529390"/>
        <function-ref name="Even" scoped="" ref="0x40529470"/>
        <function-ref name="Zero" scoped="" ref="0x40529550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4054a298" loc="18:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4054a298"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4054a470"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4054a550"/>
        <function-ref name="led1On" scoped="" ref="0x4054a630"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4054a710"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4054a7f0"/>
        <function-ref name="get" scoped="" ref="0x4054a8d0"/>
        <function-ref name="led1Off" scoped="" ref="0x4054a9b0"/>
        <function-ref name="led2Off" scoped="" ref="0x4054ad30"/>
        <function-ref name="set" scoped="" ref="0x4054aa90"/>
        <function-ref name="led0On" scoped="" ref="0x4054ab70"/>
        <function-ref name="led2On" scoped="" ref="0x4054ac50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ECDSA" ref="0x405326d0" loc="14:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ECDSA" scoped="" ref="0x405326d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ECDSA"/>
      </instance>
      <interface-functions>
        <function-ref name="sign" scoped="" ref="0x405328a8"/>
        <function-ref name="init" scoped="" ref="0x40532988"/>
        <function-ref name="verify" scoped="" ref="0x40532a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketMsg" ref="0x40541c08" loc="21:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketMsg" scoped="" ref="0x40541c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40541de0"/>
        <function-ref name="getPayload" scoped="" ref="0x40541ec0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40549010"/>
        <function-ref name="cancel" scoped="" ref="0x405490f0"/>
        <function-ref name="sendDone" scoped="" ref="0x405491d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PriKeyMsg" ref="0x405414b0" loc="20:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PriKeyMsg" scoped="" ref="0x405414b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40541688"/>
        <function-ref name="getPayload" scoped="" ref="0x40541768"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40541848"/>
        <function-ref name="cancel" scoped="" ref="0x40541928"/>
        <function-ref name="sendDone" scoped="" ref="0x40541a08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeMsg" ref="0x405493b8" loc="22:testECDSAM.nc">
      <component-ref qname="testECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeMsg" scoped="" ref="0x405493b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40549590"/>
        <function-ref name="getPayload" scoped="" ref="0x40549670"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40549750"/>
        <function-ref name="cancel" scoped="" ref="0x40549830"/>
        <function-ref name="sendDone" scoped="" ref="0x40549910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x403ebc48" loc="46:/home/user/tinyos-main/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x403ebc48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x403ebe20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x403ebf00"/>
        <function-ref name="led1On" scoped="" ref="0x405c0010"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405c00f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405c01d0"/>
        <function-ref name="get" scoped="" ref="0x405c02b0"/>
        <function-ref name="led1Off" scoped="" ref="0x405c0390"/>
        <function-ref name="led2Off" scoped="" ref="0x405c0710"/>
        <function-ref name="set" scoped="" ref="0x405c0470"/>
        <function-ref name="led0On" scoped="" ref="0x405c0550"/>
        <function-ref name="led2On" scoped="" ref="0x405c0630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x405bc030" loc="50:/home/user/tinyos-main/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405bc030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405bc208"/>
        <function-ref name="isInput" scoped="" ref="0x405bc2e8"/>
        <function-ref name="toggle" scoped="" ref="0x405bc3c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405bc4a8"/>
        <function-ref name="get" scoped="" ref="0x405bc588"/>
        <function-ref name="makeOutput" scoped="" ref="0x405bc668"/>
        <function-ref name="set" scoped="" ref="0x405bc748"/>
        <function-ref name="clr" scoped="" ref="0x405bc828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405bd010" loc="46:/home/user/tinyos-main/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405bd010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405bd1e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x405bca18" loc="51:/home/user/tinyos-main/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x405bca18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405bcbf0"/>
        <function-ref name="isInput" scoped="" ref="0x405bccd0"/>
        <function-ref name="toggle" scoped="" ref="0x405bcdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x405bce90"/>
        <function-ref name="get" scoped="" ref="0x405bb010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405bb0f0"/>
        <function-ref name="set" scoped="" ref="0x405bb1d0"/>
        <function-ref name="clr" scoped="" ref="0x405bb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x405bd358" loc="47:/home/user/tinyos-main/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405bd358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405bd530"/>
        <function-ref name="led0Toggle" scoped="" ref="0x405bd610"/>
        <function-ref name="led1On" scoped="" ref="0x405bd6f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405bd7d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405bd8b0"/>
        <function-ref name="get" scoped="" ref="0x405bd990"/>
        <function-ref name="led1Off" scoped="" ref="0x405bda70"/>
        <function-ref name="led2Off" scoped="" ref="0x405bddf0"/>
        <function-ref name="set" scoped="" ref="0x405bdb50"/>
        <function-ref name="led0On" scoped="" ref="0x405bdc30"/>
        <function-ref name="led2On" scoped="" ref="0x405bdd10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x405bb4a0" loc="52:/home/user/tinyos-main/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x405bb4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405bb678"/>
        <function-ref name="isInput" scoped="" ref="0x405bb758"/>
        <function-ref name="toggle" scoped="" ref="0x405bb838"/>
        <function-ref name="isOutput" scoped="" ref="0x405bb918"/>
        <function-ref name="get" scoped="" ref="0x405bb9f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405bbad8"/>
        <function-ref name="set" scoped="" ref="0x405bbbb8"/>
        <function-ref name="clr" scoped="" ref="0x405bbc98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x405bfe50" loc="44:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405bfe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405cb050"/>
        <function-ref name="isInput" scoped="" ref="0x405cb130"/>
        <function-ref name="toggle" scoped="" ref="0x405cb210"/>
        <function-ref name="isOutput" scoped="" ref="0x405cb2f0"/>
        <function-ref name="get" scoped="" ref="0x405cb3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405cb4b0"/>
        <function-ref name="set" scoped="" ref="0x405cb590"/>
        <function-ref name="clr" scoped="" ref="0x405cb670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x405cb880" loc="45:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x405cb880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405cba58"/>
        <function-ref name="isInput" scoped="" ref="0x405cbb38"/>
        <function-ref name="toggle" scoped="" ref="0x405cbc18"/>
        <function-ref name="isOutput" scoped="" ref="0x405cbcf8"/>
        <function-ref name="get" scoped="" ref="0x405cbdd8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405cbeb8"/>
        <function-ref name="set" scoped="" ref="0x405ca010"/>
        <function-ref name="clr" scoped="" ref="0x405ca0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x405cac88" loc="47:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405cac88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405cae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x405ca300" loc="46:/home/user/tinyos-main/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x405ca300"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405ca4d8"/>
        <function-ref name="isInput" scoped="" ref="0x405ca5b8"/>
        <function-ref name="toggle" scoped="" ref="0x405ca698"/>
        <function-ref name="isOutput" scoped="" ref="0x405ca778"/>
        <function-ref name="get" scoped="" ref="0x405ca858"/>
        <function-ref name="makeOutput" scoped="" ref="0x405ca938"/>
        <function-ref name="set" scoped="" ref="0x405caa18"/>
        <function-ref name="clr" scoped="" ref="0x405caaf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x405d6280" loc="64:/home/user/tinyos-main/tos/system/RandomLfsrC.nc">
      <component-ref qname="RandomLfsrC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x405d6280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x405d6458"/>
        <function-ref name="rand32" scoped="" ref="0x405d6538"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405b1ef8" loc="63:/home/user/tinyos-main/tos/system/RandomLfsrC.nc">
      <component-ref qname="RandomLfsrC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405b1ef8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405d60e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CurveParam" ref="0x405d95d8" loc="46:NNM.nc">
      <component-ref qname="NNM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x405d95d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x405d97b0"/>
        <function-ref name="omega_mul" scoped="" ref="0x405d9890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NN" ref="0x405e0a00" loc="45:NNM.nc">
      <component-ref qname="NNM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x405e0a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x405e0bd8"/>
        <function-ref name="LShift" scoped="" ref="0x405e0cb8"/>
        <function-ref name="ModSmall" scoped="" ref="0x405e0d98"/>
        <function-ref name="Gcd" scoped="" ref="0x405e0e78"/>
        <function-ref name="ModExp" scoped="" ref="0x405df010"/>
        <function-ref name="ModNeg" scoped="" ref="0x405df0f0"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x405df1d0"/>
        <function-ref name="ModBarrett" scoped="" ref="0x405df2b0"/>
        <function-ref name="Digits" scoped="" ref="0x405df390"/>
        <function-ref name="ModSub" scoped="" ref="0x405df470"/>
        <function-ref name="ModDiv" scoped="" ref="0x405df550"/>
        <function-ref name="Cmp" scoped="" ref="0x405df630"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x405df710"/>
        <function-ref name="AssignDigit" scoped="" ref="0x405df870"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x405df950"/>
        <function-ref name="ModMult" scoped="" ref="0x405dfa30"/>
        <function-ref name="Sub" scoped="" ref="0x405dfb10"/>
        <function-ref name="Mult" scoped="" ref="0x405dfbf0"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x405dfcd0"/>
        <function-ref name="Assign" scoped="" ref="0x405dfdb0"/>
        <function-ref name="Decode" scoped="" ref="0x405dfe90"/>
        <function-ref name="Encode" scoped="" ref="0x405de010"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x405de0f0"/>
        <function-ref name="Mod" scoped="" ref="0x405de1d0"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x405de2b0"/>
        <function-ref name="Div" scoped="" ref="0x405de490"/>
        <function-ref name="Add" scoped="" ref="0x405de570"/>
        <function-ref name="ModAdd" scoped="" ref="0x405de650"/>
        <function-ref name="One" scoped="" ref="0x405de730"/>
        <function-ref name="Bits" scoped="" ref="0x405de810"/>
        <function-ref name="TestBit" scoped="" ref="0x405de8f0"/>
        <function-ref name="Equal" scoped="" ref="0x405de9d0"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x405deab0"/>
        <function-ref name="AssignZero" scoped="" ref="0x405deb90"/>
        <function-ref name="RShift" scoped="" ref="0x405dec70"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x405ded50"/>
        <function-ref name="ModInv" scoped="" ref="0x405dee30"/>
        <function-ref name="Even" scoped="" ref="0x405def10"/>
        <function-ref name="Zero" scoped="" ref="0x405dd010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ECC" ref="0x405d8c28" loc="38:ECCC.nc">
      <component-ref qname="ECCC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ECC" scoped="" ref="0x405d8c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ECC"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x405d8e00"/>
        <function-ref name="point2octet" scoped="" ref="0x405d8ee0"/>
        <function-ref name="win_mul" scoped="" ref="0x40731010"/>
        <function-ref name="gen_private_key" scoped="" ref="0x407310f0"/>
        <function-ref name="win_mul_Z" scoped="" ref="0x407311d0"/>
        <function-ref name="octet2point" scoped="" ref="0x407312b0"/>
        <function-ref name="init" scoped="" ref="0x40731390"/>
        <function-ref name="add_proj" scoped="" ref="0x40731470"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x40731550"/>
        <function-ref name="point_is_zero" scoped="" ref="0x40731630"/>
        <function-ref name="mul" scoped="" ref="0x40731710"/>
        <function-ref name="dbl_proj" scoped="" ref="0x407317f0"/>
        <function-ref name="win_mul_base" scoped="" ref="0x407318d0"/>
        <function-ref name="check_point" scoped="" ref="0x40731a30"/>
        <function-ref name="win_precompute_Z" scoped="" ref="0x40731b10"/>
        <function-ref name="add" scoped="" ref="0x40731bf0"/>
        <function-ref name="gen_public_key" scoped="" ref="0x40731cd0"/>
        <function-ref name="win_precompute" scoped="" ref="0x40731db0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CurveParam" ref="0x40741f18" loc="36:ECCM.nc">
      <component-ref qname="ECCM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x40741f18"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x40740108"/>
        <function-ref name="omega_mul" scoped="" ref="0x407401e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ECC" ref="0x407463c0" loc="34:ECCM.nc">
      <component-ref qname="ECCM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ECC" scoped="" ref="0x407463c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ECC"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x40746598"/>
        <function-ref name="point2octet" scoped="" ref="0x40746678"/>
        <function-ref name="win_mul" scoped="" ref="0x40746758"/>
        <function-ref name="gen_private_key" scoped="" ref="0x40746838"/>
        <function-ref name="win_mul_Z" scoped="" ref="0x40746918"/>
        <function-ref name="octet2point" scoped="" ref="0x407469f8"/>
        <function-ref name="init" scoped="" ref="0x40746ad8"/>
        <function-ref name="add_proj" scoped="" ref="0x40746bb8"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x40746c98"/>
        <function-ref name="point_is_zero" scoped="" ref="0x40746d78"/>
        <function-ref name="mul" scoped="" ref="0x40746e58"/>
        <function-ref name="dbl_proj" scoped="" ref="0x40743010"/>
        <function-ref name="win_mul_base" scoped="" ref="0x407430f0"/>
        <function-ref name="check_point" scoped="" ref="0x40743250"/>
        <function-ref name="win_precompute_Z" scoped="" ref="0x40743330"/>
        <function-ref name="add" scoped="" ref="0x40743410"/>
        <function-ref name="gen_public_key" scoped="" ref="0x407434f0"/>
        <function-ref name="win_precompute" scoped="" ref="0x407435d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x40740388" loc="37:ECCM.nc">
      <component-ref qname="ECCM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40740388"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40740560"/>
        <function-ref name="rand32" scoped="" ref="0x40740640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x40743748" loc="35:ECCM.nc">
      <component-ref qname="ECCM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x40743748"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x40743920"/>
        <function-ref name="LShift" scoped="" ref="0x40743a00"/>
        <function-ref name="ModSmall" scoped="" ref="0x40743ae0"/>
        <function-ref name="Gcd" scoped="" ref="0x40743bc0"/>
        <function-ref name="ModExp" scoped="" ref="0x40743ca0"/>
        <function-ref name="ModNeg" scoped="" ref="0x40743d80"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x40743e60"/>
        <function-ref name="ModBarrett" scoped="" ref="0x40742010"/>
        <function-ref name="Digits" scoped="" ref="0x407420f0"/>
        <function-ref name="ModSub" scoped="" ref="0x407421d0"/>
        <function-ref name="ModDiv" scoped="" ref="0x407422b0"/>
        <function-ref name="Cmp" scoped="" ref="0x40742390"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x40742470"/>
        <function-ref name="AssignDigit" scoped="" ref="0x407425d0"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x407426b0"/>
        <function-ref name="ModMult" scoped="" ref="0x40742790"/>
        <function-ref name="Sub" scoped="" ref="0x40742870"/>
        <function-ref name="Mult" scoped="" ref="0x40742950"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x40742a30"/>
        <function-ref name="Assign" scoped="" ref="0x40742b10"/>
        <function-ref name="Decode" scoped="" ref="0x40742bf0"/>
        <function-ref name="Encode" scoped="" ref="0x40742cd0"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x40742db0"/>
        <function-ref name="Mod" scoped="" ref="0x40742e90"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x40741010"/>
        <function-ref name="Div" scoped="" ref="0x407411f0"/>
        <function-ref name="Add" scoped="" ref="0x407412d0"/>
        <function-ref name="ModAdd" scoped="" ref="0x407413b0"/>
        <function-ref name="One" scoped="" ref="0x40741490"/>
        <function-ref name="Bits" scoped="" ref="0x40741570"/>
        <function-ref name="TestBit" scoped="" ref="0x40741650"/>
        <function-ref name="Equal" scoped="" ref="0x40741730"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40741810"/>
        <function-ref name="AssignZero" scoped="" ref="0x407418f0"/>
        <function-ref name="RShift" scoped="" ref="0x407419d0"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x40741ab0"/>
        <function-ref name="ModInv" scoped="" ref="0x40741b90"/>
        <function-ref name="Even" scoped="" ref="0x40741c70"/>
        <function-ref name="Zero" scoped="" ref="0x40741d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CurveParam" ref="0x407446e0" loc="35:secp128r1.nc">
      <component-ref qname="secp128r1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x407446e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x407448b8"/>
        <function-ref name="omega_mul" scoped="" ref="0x40744998"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x40744b10" loc="36:secp128r1.nc">
      <component-ref qname="secp128r1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x40744b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x40744ce8"/>
        <function-ref name="LShift" scoped="" ref="0x40744dc8"/>
        <function-ref name="ModSmall" scoped="" ref="0x40744ea8"/>
        <function-ref name="Gcd" scoped="" ref="0x40833010"/>
        <function-ref name="ModExp" scoped="" ref="0x408330f0"/>
        <function-ref name="ModNeg" scoped="" ref="0x408331d0"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x408332b0"/>
        <function-ref name="ModBarrett" scoped="" ref="0x40833390"/>
        <function-ref name="Digits" scoped="" ref="0x40833470"/>
        <function-ref name="ModSub" scoped="" ref="0x40833550"/>
        <function-ref name="ModDiv" scoped="" ref="0x40833630"/>
        <function-ref name="Cmp" scoped="" ref="0x40833710"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x408337f0"/>
        <function-ref name="AssignDigit" scoped="" ref="0x40833950"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x40833a30"/>
        <function-ref name="ModMult" scoped="" ref="0x40833b10"/>
        <function-ref name="Sub" scoped="" ref="0x40833bf0"/>
        <function-ref name="Mult" scoped="" ref="0x40833cd0"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x40833db0"/>
        <function-ref name="Assign" scoped="" ref="0x40833e90"/>
        <function-ref name="Decode" scoped="" ref="0x40832010"/>
        <function-ref name="Encode" scoped="" ref="0x408320f0"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x408321d0"/>
        <function-ref name="Mod" scoped="" ref="0x408322b0"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x40832390"/>
        <function-ref name="Div" scoped="" ref="0x40832570"/>
        <function-ref name="Add" scoped="" ref="0x40832650"/>
        <function-ref name="ModAdd" scoped="" ref="0x40832730"/>
        <function-ref name="One" scoped="" ref="0x40832810"/>
        <function-ref name="Bits" scoped="" ref="0x408328f0"/>
        <function-ref name="TestBit" scoped="" ref="0x408329d0"/>
        <function-ref name="Equal" scoped="" ref="0x40832ab0"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40832b90"/>
        <function-ref name="AssignZero" scoped="" ref="0x40832c70"/>
        <function-ref name="RShift" scoped="" ref="0x40832d50"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x40832e30"/>
        <function-ref name="ModInv" scoped="" ref="0x40832f10"/>
        <function-ref name="Even" scoped="" ref="0x40831010"/>
        <function-ref name="Zero" scoped="" ref="0x408310f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CurveParam" ref="0x40854158" loc="37:secp128r2.nc">
      <component-ref qname="secp128r2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x40854158"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x40854330"/>
        <function-ref name="omega_mul" scoped="" ref="0x40854410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x40854588" loc="38:secp128r2.nc">
      <component-ref qname="secp128r2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x40854588"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x40854760"/>
        <function-ref name="LShift" scoped="" ref="0x40854840"/>
        <function-ref name="ModSmall" scoped="" ref="0x40854920"/>
        <function-ref name="Gcd" scoped="" ref="0x40854a00"/>
        <function-ref name="ModExp" scoped="" ref="0x40854ae0"/>
        <function-ref name="ModNeg" scoped="" ref="0x40854bc0"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x40854ca0"/>
        <function-ref name="ModBarrett" scoped="" ref="0x40854d80"/>
        <function-ref name="Digits" scoped="" ref="0x40854e60"/>
        <function-ref name="ModSub" scoped="" ref="0x40853010"/>
        <function-ref name="ModDiv" scoped="" ref="0x408530f0"/>
        <function-ref name="Cmp" scoped="" ref="0x408531d0"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x408532b0"/>
        <function-ref name="AssignDigit" scoped="" ref="0x40853410"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x408534f0"/>
        <function-ref name="ModMult" scoped="" ref="0x408535d0"/>
        <function-ref name="Sub" scoped="" ref="0x408536b0"/>
        <function-ref name="Mult" scoped="" ref="0x40853790"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x40853870"/>
        <function-ref name="Assign" scoped="" ref="0x40853950"/>
        <function-ref name="Decode" scoped="" ref="0x40853a30"/>
        <function-ref name="Encode" scoped="" ref="0x40853b10"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x40853bf0"/>
        <function-ref name="Mod" scoped="" ref="0x40853cd0"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x40853db0"/>
        <function-ref name="Div" scoped="" ref="0x40852010"/>
        <function-ref name="Add" scoped="" ref="0x408520f0"/>
        <function-ref name="ModAdd" scoped="" ref="0x408521d0"/>
        <function-ref name="One" scoped="" ref="0x408522b0"/>
        <function-ref name="Bits" scoped="" ref="0x40852390"/>
        <function-ref name="TestBit" scoped="" ref="0x40852470"/>
        <function-ref name="Equal" scoped="" ref="0x40852550"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40852630"/>
        <function-ref name="AssignZero" scoped="" ref="0x40852710"/>
        <function-ref name="RShift" scoped="" ref="0x408527f0"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x408528d0"/>
        <function-ref name="ModInv" scoped="" ref="0x408529b0"/>
        <function-ref name="Even" scoped="" ref="0x40852a90"/>
        <function-ref name="Zero" scoped="" ref="0x40852b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CurveParam" ref="0x40878150" loc="37:secp160k1.nc">
      <component-ref qname="secp160k1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x40878150"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x40878328"/>
        <function-ref name="omega_mul" scoped="" ref="0x40878408"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x40878580" loc="38:secp160k1.nc">
      <component-ref qname="secp160k1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x40878580"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x40878758"/>
        <function-ref name="LShift" scoped="" ref="0x40878838"/>
        <function-ref name="ModSmall" scoped="" ref="0x40878918"/>
        <function-ref name="Gcd" scoped="" ref="0x408789f8"/>
        <function-ref name="ModExp" scoped="" ref="0x40878ad8"/>
        <function-ref name="ModNeg" scoped="" ref="0x40878bb8"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x40878c98"/>
        <function-ref name="ModBarrett" scoped="" ref="0x40878d78"/>
        <function-ref name="Digits" scoped="" ref="0x40878e58"/>
        <function-ref name="ModSub" scoped="" ref="0x40877010"/>
        <function-ref name="ModDiv" scoped="" ref="0x408770f0"/>
        <function-ref name="Cmp" scoped="" ref="0x408771d0"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x408772b0"/>
        <function-ref name="AssignDigit" scoped="" ref="0x40877410"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x408774f0"/>
        <function-ref name="ModMult" scoped="" ref="0x408775d0"/>
        <function-ref name="Sub" scoped="" ref="0x408776b0"/>
        <function-ref name="Mult" scoped="" ref="0x40877790"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x40877870"/>
        <function-ref name="Assign" scoped="" ref="0x40877950"/>
        <function-ref name="Decode" scoped="" ref="0x40877a30"/>
        <function-ref name="Encode" scoped="" ref="0x40877b10"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x40877bf0"/>
        <function-ref name="Mod" scoped="" ref="0x40877cd0"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x40877db0"/>
        <function-ref name="Div" scoped="" ref="0x40891010"/>
        <function-ref name="Add" scoped="" ref="0x408910f0"/>
        <function-ref name="ModAdd" scoped="" ref="0x408911d0"/>
        <function-ref name="One" scoped="" ref="0x408912b0"/>
        <function-ref name="Bits" scoped="" ref="0x40891390"/>
        <function-ref name="TestBit" scoped="" ref="0x40891470"/>
        <function-ref name="Equal" scoped="" ref="0x40891550"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40891630"/>
        <function-ref name="AssignZero" scoped="" ref="0x40891710"/>
        <function-ref name="RShift" scoped="" ref="0x408917f0"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x408918d0"/>
        <function-ref name="ModInv" scoped="" ref="0x408919b0"/>
        <function-ref name="Even" scoped="" ref="0x40891a90"/>
        <function-ref name="Zero" scoped="" ref="0x40891b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CurveParam" ref="0x40855988" loc="35:secp160r1.nc">
      <component-ref qname="secp160r1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x40855988"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x40855b60"/>
        <function-ref name="omega_mul" scoped="" ref="0x40855c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x40855db8" loc="36:secp160r1.nc">
      <component-ref qname="secp160r1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x40855db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x408b5010"/>
        <function-ref name="LShift" scoped="" ref="0x408b50f0"/>
        <function-ref name="ModSmall" scoped="" ref="0x408b51d0"/>
        <function-ref name="Gcd" scoped="" ref="0x408b52b0"/>
        <function-ref name="ModExp" scoped="" ref="0x408b5390"/>
        <function-ref name="ModNeg" scoped="" ref="0x408b5470"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x408b5550"/>
        <function-ref name="ModBarrett" scoped="" ref="0x408b5630"/>
        <function-ref name="Digits" scoped="" ref="0x408b5710"/>
        <function-ref name="ModSub" scoped="" ref="0x408b57f0"/>
        <function-ref name="ModDiv" scoped="" ref="0x408b58d0"/>
        <function-ref name="Cmp" scoped="" ref="0x408b59b0"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x408b5a90"/>
        <function-ref name="AssignDigit" scoped="" ref="0x408b5bf0"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x408b5cd0"/>
        <function-ref name="ModMult" scoped="" ref="0x408b5db0"/>
        <function-ref name="Sub" scoped="" ref="0x408b5e90"/>
        <function-ref name="Mult" scoped="" ref="0x408b4010"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x408b40f0"/>
        <function-ref name="Assign" scoped="" ref="0x408b41d0"/>
        <function-ref name="Decode" scoped="" ref="0x408b42b0"/>
        <function-ref name="Encode" scoped="" ref="0x408b4390"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x408b4470"/>
        <function-ref name="Mod" scoped="" ref="0x408b4550"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x408b4630"/>
        <function-ref name="Div" scoped="" ref="0x408b4810"/>
        <function-ref name="Add" scoped="" ref="0x408b48f0"/>
        <function-ref name="ModAdd" scoped="" ref="0x408b49d0"/>
        <function-ref name="One" scoped="" ref="0x408b4ab0"/>
        <function-ref name="Bits" scoped="" ref="0x408b4b90"/>
        <function-ref name="TestBit" scoped="" ref="0x408b4c70"/>
        <function-ref name="Equal" scoped="" ref="0x408b4d50"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x408b4e30"/>
        <function-ref name="AssignZero" scoped="" ref="0x408b4f10"/>
        <function-ref name="RShift" scoped="" ref="0x408b3010"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x408b30f0"/>
        <function-ref name="ModInv" scoped="" ref="0x408b31d0"/>
        <function-ref name="Even" scoped="" ref="0x408b32b0"/>
        <function-ref name="Zero" scoped="" ref="0x408b3390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CurveParam" ref="0x40879620" loc="37:secp160r2.nc">
      <component-ref qname="secp160r2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x40879620"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x408797f8"/>
        <function-ref name="omega_mul" scoped="" ref="0x408798d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x40879a50" loc="38:secp160r2.nc">
      <component-ref qname="secp160r2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x40879a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x40879c28"/>
        <function-ref name="LShift" scoped="" ref="0x40879d08"/>
        <function-ref name="ModSmall" scoped="" ref="0x40879de8"/>
        <function-ref name="Gcd" scoped="" ref="0x40879ec8"/>
        <function-ref name="ModExp" scoped="" ref="0x408e6010"/>
        <function-ref name="ModNeg" scoped="" ref="0x408e60f0"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x408e61d0"/>
        <function-ref name="ModBarrett" scoped="" ref="0x408e62b0"/>
        <function-ref name="Digits" scoped="" ref="0x408e6390"/>
        <function-ref name="ModSub" scoped="" ref="0x408e6470"/>
        <function-ref name="ModDiv" scoped="" ref="0x408e6550"/>
        <function-ref name="Cmp" scoped="" ref="0x408e6630"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x408e6710"/>
        <function-ref name="AssignDigit" scoped="" ref="0x408e6870"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x408e6950"/>
        <function-ref name="ModMult" scoped="" ref="0x408e6a30"/>
        <function-ref name="Sub" scoped="" ref="0x408e6b10"/>
        <function-ref name="Mult" scoped="" ref="0x408e6bf0"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x408e6cd0"/>
        <function-ref name="Assign" scoped="" ref="0x408e6db0"/>
        <function-ref name="Decode" scoped="" ref="0x408e6e90"/>
        <function-ref name="Encode" scoped="" ref="0x40901010"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x409010f0"/>
        <function-ref name="Mod" scoped="" ref="0x409011d0"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x409012b0"/>
        <function-ref name="Div" scoped="" ref="0x40901490"/>
        <function-ref name="Add" scoped="" ref="0x40901570"/>
        <function-ref name="ModAdd" scoped="" ref="0x40901650"/>
        <function-ref name="One" scoped="" ref="0x40901730"/>
        <function-ref name="Bits" scoped="" ref="0x40901810"/>
        <function-ref name="TestBit" scoped="" ref="0x409018f0"/>
        <function-ref name="Equal" scoped="" ref="0x409019d0"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40901ab0"/>
        <function-ref name="AssignZero" scoped="" ref="0x40901b90"/>
        <function-ref name="RShift" scoped="" ref="0x40901c70"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x40901d50"/>
        <function-ref name="ModInv" scoped="" ref="0x40901e30"/>
        <function-ref name="Even" scoped="" ref="0x40901f10"/>
        <function-ref name="Zero" scoped="" ref="0x40900010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CurveParam" ref="0x408b66f8" loc="37:secp192k1.nc">
      <component-ref qname="secp192k1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x408b66f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x408b68d0"/>
        <function-ref name="omega_mul" scoped="" ref="0x408b69b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x408b6b28" loc="38:secp192k1.nc">
      <component-ref qname="secp192k1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x408b6b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x408b6d00"/>
        <function-ref name="LShift" scoped="" ref="0x408b6de0"/>
        <function-ref name="ModSmall" scoped="" ref="0x408b6ec0"/>
        <function-ref name="Gcd" scoped="" ref="0x40939010"/>
        <function-ref name="ModExp" scoped="" ref="0x409390f0"/>
        <function-ref name="ModNeg" scoped="" ref="0x409391d0"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x409392b0"/>
        <function-ref name="ModBarrett" scoped="" ref="0x40939390"/>
        <function-ref name="Digits" scoped="" ref="0x40939470"/>
        <function-ref name="ModSub" scoped="" ref="0x40939550"/>
        <function-ref name="ModDiv" scoped="" ref="0x40939630"/>
        <function-ref name="Cmp" scoped="" ref="0x40939710"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x409397f0"/>
        <function-ref name="AssignDigit" scoped="" ref="0x40939950"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x40939a30"/>
        <function-ref name="ModMult" scoped="" ref="0x40939b10"/>
        <function-ref name="Sub" scoped="" ref="0x40939bf0"/>
        <function-ref name="Mult" scoped="" ref="0x40939cd0"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x40939db0"/>
        <function-ref name="Assign" scoped="" ref="0x40939e90"/>
        <function-ref name="Decode" scoped="" ref="0x40938010"/>
        <function-ref name="Encode" scoped="" ref="0x409380f0"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x409381d0"/>
        <function-ref name="Mod" scoped="" ref="0x409382b0"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x40938390"/>
        <function-ref name="Div" scoped="" ref="0x40938570"/>
        <function-ref name="Add" scoped="" ref="0x40938650"/>
        <function-ref name="ModAdd" scoped="" ref="0x40938730"/>
        <function-ref name="One" scoped="" ref="0x40938810"/>
        <function-ref name="Bits" scoped="" ref="0x409388f0"/>
        <function-ref name="TestBit" scoped="" ref="0x409389d0"/>
        <function-ref name="Equal" scoped="" ref="0x40938ab0"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40938b90"/>
        <function-ref name="AssignZero" scoped="" ref="0x40938c70"/>
        <function-ref name="RShift" scoped="" ref="0x40938d50"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x40938e30"/>
        <function-ref name="ModInv" scoped="" ref="0x40938f10"/>
        <function-ref name="Even" scoped="" ref="0x40937010"/>
        <function-ref name="Zero" scoped="" ref="0x409370f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CurveParam" ref="0x408e7bb8" loc="37:secp192r1.nc">
      <component-ref qname="secp192r1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CurveParam" scoped="" ref="0x408e7bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CurveParam"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x408e7d90"/>
        <function-ref name="omega_mul" scoped="" ref="0x408e7e70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x4095d010" loc="38:secp192r1.nc">
      <component-ref qname="secp192r1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x4095d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x4095d1e8"/>
        <function-ref name="LShift" scoped="" ref="0x4095d2c8"/>
        <function-ref name="ModSmall" scoped="" ref="0x4095d3a8"/>
        <function-ref name="Gcd" scoped="" ref="0x4095d488"/>
        <function-ref name="ModExp" scoped="" ref="0x4095d568"/>
        <function-ref name="ModNeg" scoped="" ref="0x4095d648"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x4095d728"/>
        <function-ref name="ModBarrett" scoped="" ref="0x4095d808"/>
        <function-ref name="Digits" scoped="" ref="0x4095d8e8"/>
        <function-ref name="ModSub" scoped="" ref="0x4095d9c8"/>
        <function-ref name="ModDiv" scoped="" ref="0x4095daa8"/>
        <function-ref name="Cmp" scoped="" ref="0x4095db88"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x4095dc68"/>
        <function-ref name="AssignDigit" scoped="" ref="0x4095ddc8"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x4095dea8"/>
        <function-ref name="ModMult" scoped="" ref="0x4095c010"/>
        <function-ref name="Sub" scoped="" ref="0x4095c0f0"/>
        <function-ref name="Mult" scoped="" ref="0x4095c1d0"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x4095c2b0"/>
        <function-ref name="Assign" scoped="" ref="0x4095c390"/>
        <function-ref name="Decode" scoped="" ref="0x4095c470"/>
        <function-ref name="Encode" scoped="" ref="0x4095c550"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x4095c630"/>
        <function-ref name="Mod" scoped="" ref="0x4095c710"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x4095c7f0"/>
        <function-ref name="Div" scoped="" ref="0x4095c9d0"/>
        <function-ref name="Add" scoped="" ref="0x4095cab0"/>
        <function-ref name="ModAdd" scoped="" ref="0x4095cb90"/>
        <function-ref name="One" scoped="" ref="0x4095cc70"/>
        <function-ref name="Bits" scoped="" ref="0x4095cd50"/>
        <function-ref name="TestBit" scoped="" ref="0x4095ce30"/>
        <function-ref name="Equal" scoped="" ref="0x4095cf10"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x40979010"/>
        <function-ref name="AssignZero" scoped="" ref="0x409790f0"/>
        <function-ref name="RShift" scoped="" ref="0x409791d0"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x409792b0"/>
        <function-ref name="ModInv" scoped="" ref="0x40979390"/>
        <function-ref name="Even" scoped="" ref="0x40979470"/>
        <function-ref name="Zero" scoped="" ref="0x40979550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ECDSA" ref="0x4099cdd8" loc="34:ECDSAC.nc">
      <component-ref qname="ECDSAC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ECDSA" scoped="" ref="0x4099cdd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ECDSA"/>
      </instance>
      <interface-functions>
        <function-ref name="sign" scoped="" ref="0x40999010"/>
        <function-ref name="init" scoped="" ref="0x409990f0"/>
        <function-ref name="verify" scoped="" ref="0x409991d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SHA1" ref="0x409af8d8" loc="59:ECDSAM.nc">
      <component-ref qname="ECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SHA1" scoped="" ref="0x409af8d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SHA1"/>
      </instance>
      <interface-functions>
        <function-ref name="reset" scoped="" ref="0x409afab0"/>
        <function-ref name="update" scoped="" ref="0x409afb90"/>
        <function-ref name="digest" scoped="" ref="0x409afc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ECC" ref="0x409b46b0" loc="57:ECDSAM.nc">
      <component-ref qname="ECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ECC" scoped="" ref="0x409b46b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ECC"/>
      </instance>
      <interface-functions>
        <function-ref name="get_param" scoped="" ref="0x409b4888"/>
        <function-ref name="point2octet" scoped="" ref="0x409b4968"/>
        <function-ref name="win_mul" scoped="" ref="0x409b4a48"/>
        <function-ref name="gen_private_key" scoped="" ref="0x409b4b28"/>
        <function-ref name="win_mul_Z" scoped="" ref="0x409b4c08"/>
        <function-ref name="octet2point" scoped="" ref="0x409b4ce8"/>
        <function-ref name="init" scoped="" ref="0x409b4dc8"/>
        <function-ref name="add_proj" scoped="" ref="0x409b4ea8"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x409b3010"/>
        <function-ref name="point_is_zero" scoped="" ref="0x409b30f0"/>
        <function-ref name="mul" scoped="" ref="0x409b31d0"/>
        <function-ref name="dbl_proj" scoped="" ref="0x409b32b0"/>
        <function-ref name="win_mul_base" scoped="" ref="0x409b3390"/>
        <function-ref name="check_point" scoped="" ref="0x409b34f0"/>
        <function-ref name="win_precompute_Z" scoped="" ref="0x409b35d0"/>
        <function-ref name="add" scoped="" ref="0x409b36b0"/>
        <function-ref name="gen_public_key" scoped="" ref="0x409b3790"/>
        <function-ref name="win_precompute" scoped="" ref="0x409b3870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x409b39f0" loc="58:ECDSAM.nc">
      <component-ref qname="ECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x409b39f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x409b3bc8"/>
        <function-ref name="rand32" scoped="" ref="0x409b3ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NN" ref="0x409b6040" loc="56:ECDSAM.nc">
      <component-ref qname="ECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NN" scoped="" ref="0x409b6040"/></type-interface>
      <instance>
        <interfacedef-ref qname="NN"/>
      </instance>
      <interface-functions>
        <function-ref name="ModSqr" scoped="" ref="0x409b6218"/>
        <function-ref name="LShift" scoped="" ref="0x409b62f8"/>
        <function-ref name="ModSmall" scoped="" ref="0x409b63d8"/>
        <function-ref name="Gcd" scoped="" ref="0x409b64b8"/>
        <function-ref name="ModExp" scoped="" ref="0x409b6598"/>
        <function-ref name="ModNeg" scoped="" ref="0x409b6678"/>
        <function-ref name="AddDigitMult" scoped="" ref="0x409b6758"/>
        <function-ref name="ModBarrett" scoped="" ref="0x409b6838"/>
        <function-ref name="Digits" scoped="" ref="0x409b6918"/>
        <function-ref name="ModSub" scoped="" ref="0x409b69f8"/>
        <function-ref name="ModDiv" scoped="" ref="0x409b6ad8"/>
        <function-ref name="Cmp" scoped="" ref="0x409b6bb8"/>
        <function-ref name="ModBarrettInit" scoped="" ref="0x409b6c98"/>
        <function-ref name="AssignDigit" scoped="" ref="0x409b6df8"/>
        <function-ref name="BarrettSetBuf" scoped="" ref="0x409b6ed8"/>
        <function-ref name="ModMult" scoped="" ref="0x409b5010"/>
        <function-ref name="Sub" scoped="" ref="0x409b50f0"/>
        <function-ref name="Mult" scoped="" ref="0x409b51d0"/>
        <function-ref name="ModMultOpt" scoped="" ref="0x409b52b0"/>
        <function-ref name="Assign" scoped="" ref="0x409b5390"/>
        <function-ref name="Decode" scoped="" ref="0x409b5470"/>
        <function-ref name="Encode" scoped="" ref="0x409b5550"/>
        <function-ref name="Assign2Exp" scoped="" ref="0x409b5630"/>
        <function-ref name="Mod" scoped="" ref="0x409b5710"/>
        <function-ref name="ModSqrRootOpt" scoped="" ref="0x409b57f0"/>
        <function-ref name="Div" scoped="" ref="0x409b59d0"/>
        <function-ref name="Add" scoped="" ref="0x409b5ab0"/>
        <function-ref name="ModAdd" scoped="" ref="0x409b5b90"/>
        <function-ref name="One" scoped="" ref="0x409b5c70"/>
        <function-ref name="Bits" scoped="" ref="0x409b5d50"/>
        <function-ref name="TestBit" scoped="" ref="0x409b5e30"/>
        <function-ref name="Equal" scoped="" ref="0x409b5f10"/>
        <function-ref name="ModSqrOpt" scoped="" ref="0x409b4010"/>
        <function-ref name="AssignZero" scoped="" ref="0x409b40f0"/>
        <function-ref name="RShift" scoped="" ref="0x409b41d0"/>
        <function-ref name="ModDivOpt" scoped="" ref="0x409b42b0"/>
        <function-ref name="ModInv" scoped="" ref="0x409b4390"/>
        <function-ref name="Even" scoped="" ref="0x409b4470"/>
        <function-ref name="Zero" scoped="" ref="0x409b4550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ECDSA" ref="0x40999b08" loc="54:ECDSAM.nc">
      <component-ref qname="ECDSAM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ECDSA" scoped="" ref="0x40999b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ECDSA"/>
      </instance>
      <interface-functions>
        <function-ref name="sign" scoped="" ref="0x40999ce0"/>
        <function-ref name="init" scoped="" ref="0x40999dc0"/>
        <function-ref name="verify" scoped="" ref="0x40999ea0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHA1" ref="0x409b7860" loc="43:SHA1M.nc">
      <component-ref qname="SHA1M"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SHA1" scoped="" ref="0x409b7860"/></type-interface>
      <instance>
        <interfacedef-ref qname="SHA1"/>
      </instance>
      <interface-functions>
        <function-ref name="reset" scoped="" ref="0x409b7a38"/>
        <function-ref name="update" scoped="" ref="0x409b7b18"/>
        <function-ref name="digest" scoped="" ref="0x409b7bf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40a1d660" loc="45:/home/user/tinyos-main/tos/system/TimerMilliC.nc">
      <component-ref qname="testECDSA.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40a1d660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b34170"/>
        <function-ref name="fired" scoped="" ref="0x40a383f8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a38b00"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a388a8"/>
        <function-ref name="getdt" scoped="" ref="0x40b34620"/>
        <function-ref name="gett0" scoped="" ref="0x40b343c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40a38650"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40a1dc88"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a38e20"/>
        <function-ref name="startOneShot" scoped="" ref="0x40a1df08"/>
        <function-ref name="stop" scoped="" ref="0x40a381a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40a3a850" loc="49:/home/user/tinyos-main/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40a3a850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a36368"/>
        <function-ref name="fired" scoped="" ref="0x40a375e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a37cf0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a37a98"/>
        <function-ref name="getdt" scoped="" ref="0x40a36818"/>
        <function-ref name="gett0" scoped="" ref="0x40a365c0"/>
        <function-ref name="isRunning" scoped="" ref="0x40a37840"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40a3ae78"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a36048"/>
        <function-ref name="startOneShot" scoped="" ref="0x40a37110"/>
        <function-ref name="stop" scoped="" ref="0x40a37390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40a32938" loc="46:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40a32938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a304c8"/>
        <function-ref name="fired" scoped="" ref="0x40a31768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a31e70"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a31c18"/>
        <function-ref name="getdt" scoped="" ref="0x40a30978"/>
        <function-ref name="gett0" scoped="" ref="0x40a30720"/>
        <function-ref name="isRunning" scoped="" ref="0x40a319c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40a31010"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a301a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40a31290"/>
        <function-ref name="stop" scoped="" ref="0x40a31510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x40a30cd8" loc="47:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x40a30cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a2e370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a32188" loc="45:/home/user/tinyos-main/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40a32188"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a32360"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x40a42500" loc="29:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x40a42500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a42c50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40a45170"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40a42ec8"/>
        <function-ref name="overflow" scoped="" ref="0x40a453e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a2b3a8" loc="27:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40a2b3a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a2b580"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x40a48b10" loc="28:/home/user/tinyos-main/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x40a48b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a47068"/>
        <function-ref name="fired" scoped="" ref="0x40a4c820"/>
        <function-ref name="startAt" scoped="" ref="0x40a4cd10"/>
        <function-ref name="isRunning" scoped="" ref="0x40a4ca98"/>
        <function-ref name="getAlarm" scoped="" ref="0x40a472e0"/>
        <function-ref name="start" scoped="" ref="0x40a4c308"/>
        <function-ref name="stop" scoped="" ref="0x40a4c5a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ad19e0" loc="26:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40ad19e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40acf010"/>
        <function-ref name="fired" scoped="" ref="0x40ad0718"/>
        <function-ref name="startAt" scoped="" ref="0x40ad0c08"/>
        <function-ref name="isRunning" scoped="" ref="0x40ad0990"/>
        <function-ref name="getAlarm" scoped="" ref="0x40acf288"/>
        <function-ref name="start" scoped="" ref="0x40ad0200"/>
        <function-ref name="stop" scoped="" ref="0x40ad04a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40ad15a8" loc="25:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40ad15a8"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x4034f5d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x4034f5d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ad1780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40acf5b8" loc="27:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40acf5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40acfd08"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40acd288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40acd010"/>
        <function-ref name="overflow" scoped="" ref="0x40acd500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x40f6c4e0" loc="31:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40f6c4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40f6c6b8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40f6c798"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40f6c878"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40f6c958"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40f6ca38"/>
        <function-ref name="setControl" scoped="" ref="0x40f6cb18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40f3c6b8" loc="26:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40f3c6b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40f3bb80"/>
        <function-ref name="fired" scoped="" ref="0x40f3b350"/>
        <function-ref name="startAt" scoped="" ref="0x40f3b840"/>
        <function-ref name="isRunning" scoped="" ref="0x40f3b5c8"/>
        <function-ref name="getAlarm" scoped="" ref="0x40f3bdf8"/>
        <function-ref name="start" scoped="" ref="0x40f3ce08"/>
        <function-ref name="stop" scoped="" ref="0x40f3b0d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40f3c280" loc="25:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40f3c280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40f3c458"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40f3a150" loc="27:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40f3a150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40f3a8a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40f3ad90"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40f3ab18"/>
        <function-ref name="overflow" scoped="" ref="0x40f6e048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x40f69730" loc="33:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x40f69730"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x40f69908"/>
        <function-ref name="compareBusy" scoped="" ref="0x40f699e8"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40f69ac8"/>
        <function-ref name="countBusy" scoped="" ref="0x40f69ba8"/>
        <function-ref name="getAssr" scoped="" ref="0x40f69c88"/>
        <function-ref name="setAssr" scoped="" ref="0x40f69d68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x40f6cd08" loc="32:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40f6cd08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40f69288"/>
        <function-ref name="fired" scoped="" ref="0x40f6a888"/>
        <function-ref name="get" scoped="" ref="0x40f6a370"/>
        <function-ref name="reset" scoped="" ref="0x40f6ab00"/>
        <function-ref name="isOn" scoped="" ref="0x40f69500"/>
        <function-ref name="set" scoped="" ref="0x40f6a5e8"/>
        <function-ref name="start" scoped="" ref="0x40f6ad78"/>
        <function-ref name="stop" scoped="" ref="0x40f69010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40f6e338" loc="30:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40f6e338"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40f6dd88"/>
        <function-ref name="test" scoped="" ref="0x40f6d898"/>
        <function-ref name="get" scoped="" ref="0x40f6e980"/>
        <function-ref name="setScale" scoped="" ref="0x40f6c010"/>
        <function-ref name="getScale" scoped="" ref="0x40f6c2b0"/>
        <function-ref name="reset" scoped="" ref="0x40f6d130"/>
        <function-ref name="overflow" scoped="" ref="0x40f6ee98"/>
        <function-ref name="isOn" scoped="" ref="0x40f6db10"/>
        <function-ref name="set" scoped="" ref="0x40f6ebf8"/>
        <function-ref name="start" scoped="" ref="0x40f6d3a8"/>
        <function-ref name="stop" scoped="" ref="0x40f6d620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40a80760" loc="48:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40a80760"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40a80938"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40a80a18"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40a80af8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40a80bd8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40a80cb8"/>
        <function-ref name="setControl" scoped="" ref="0x40a80d98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x40aa1c30" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x40aa1c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x40aa1e08"/>
        <function-ref name="compareBusy" scoped="" ref="0x40aa1ee8"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40aa0010"/>
        <function-ref name="countBusy" scoped="" ref="0x40aa00f0"/>
        <function-ref name="getAssr" scoped="" ref="0x40aa01d0"/>
        <function-ref name="setAssr" scoped="" ref="0x40aa02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40aa30f0" loc="49:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40aa30f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40aa1660"/>
        <function-ref name="fired" scoped="" ref="0x40aa3c50"/>
        <function-ref name="get" scoped="" ref="0x40aa3738"/>
        <function-ref name="reset" scoped="" ref="0x40aa3ec8"/>
        <function-ref name="isOn" scoped="" ref="0x40aa18d8"/>
        <function-ref name="set" scoped="" ref="0x40aa39b0"/>
        <function-ref name="start" scoped="" ref="0x40aa1170"/>
        <function-ref name="stop" scoped="" ref="0x40aa13e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40a82488" loc="47:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40a82488"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40a81ee0"/>
        <function-ref name="test" scoped="" ref="0x40a819f0"/>
        <function-ref name="get" scoped="" ref="0x40a82ad0"/>
        <function-ref name="setScale" scoped="" ref="0x40a80170"/>
        <function-ref name="getScale" scoped="" ref="0x40a80410"/>
        <function-ref name="reset" scoped="" ref="0x40a81288"/>
        <function-ref name="overflow" scoped="" ref="0x40a81010"/>
        <function-ref name="isOn" scoped="" ref="0x40a81c68"/>
        <function-ref name="set" scoped="" ref="0x40a82d48"/>
        <function-ref name="start" scoped="" ref="0x40a81500"/>
        <function-ref name="stop" scoped="" ref="0x40a81778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40a9a360" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40a9a360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40a9a538"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40a9a618"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40a9a6f8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40a9a7d8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40a9a8b8"/>
        <function-ref name="setControl" scoped="" ref="0x40a9a998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x40a987b8" loc="52:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x40a987b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x40a98990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x40a98c18" loc="53:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x40a98c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x40a98df0"/>
        <function-ref name="compareBusy" scoped="" ref="0x40a98ed0"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40a97010"/>
        <function-ref name="countBusy" scoped="" ref="0x40a970f0"/>
        <function-ref name="getAssr" scoped="" ref="0x40a971d0"/>
        <function-ref name="setAssr" scoped="" ref="0x40a972b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40a9acc0" loc="51:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40a9acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40a98288"/>
        <function-ref name="fired" scoped="" ref="0x40a99830"/>
        <function-ref name="get" scoped="" ref="0x40a99318"/>
        <function-ref name="reset" scoped="" ref="0x40a99aa8"/>
        <function-ref name="isOn" scoped="" ref="0x40a98500"/>
        <function-ref name="set" scoped="" ref="0x40a99590"/>
        <function-ref name="start" scoped="" ref="0x40a99d20"/>
        <function-ref name="stop" scoped="" ref="0x40a98010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40a9d010" loc="49:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40a9d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40a9ca68"/>
        <function-ref name="test" scoped="" ref="0x40a9c578"/>
        <function-ref name="get" scoped="" ref="0x40a9d658"/>
        <function-ref name="setScale" scoped="" ref="0x40a9cce0"/>
        <function-ref name="getScale" scoped="" ref="0x40a9a010"/>
        <function-ref name="reset" scoped="" ref="0x40a9dde8"/>
        <function-ref name="overflow" scoped="" ref="0x40a9db70"/>
        <function-ref name="isOn" scoped="" ref="0x40a9c7f0"/>
        <function-ref name="set" scoped="" ref="0x40a9d8d0"/>
        <function-ref name="start" scoped="" ref="0x40a9c088"/>
        <function-ref name="stop" scoped="" ref="0x40a9c300"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x40afb818" loc="74:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x40afb818"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40afb9f0"/>
        <function-ref name="runTask" scoped="" ref="0x40afbad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40adae50" loc="49:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40adae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40afb350"/>
        <function-ref name="fired" scoped="" ref="0x40afcaf8"/>
        <function-ref name="startAt" scoped="" ref="0x40afb010"/>
        <function-ref name="isRunning" scoped="" ref="0x40afcd70"/>
        <function-ref name="getAlarm" scoped="" ref="0x40afb5c8"/>
        <function-ref name="start" scoped="" ref="0x40afc5e0"/>
        <function-ref name="stop" scoped="" ref="0x40afc880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40a2ca88" loc="48:/home/user/tinyos-main/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40a2ca88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ada650"/>
        <function-ref name="fired" scoped="" ref="0x40acb830"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40ada010"/>
        <function-ref name="isOneShot" scoped="" ref="0x40acbce0"/>
        <function-ref name="getdt" scoped="" ref="0x40adab00"/>
        <function-ref name="gett0" scoped="" ref="0x40ada8a8"/>
        <function-ref name="isRunning" scoped="" ref="0x40acba88"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40acb0d8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40ada330"/>
        <function-ref name="startOneShot" scoped="" ref="0x40acb358"/>
        <function-ref name="stop" scoped="" ref="0x40acb5d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x40b19050" loc="71:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x40b19050"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40b19228"/>
        <function-ref name="runTask" scoped="" ref="0x40b19308"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x40b1de30" loc="49:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x40b1de30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b1a920"/>
        <function-ref name="fired" scoped="" ref="0x40b1bbc0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40b1a2e0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40b1a088"/>
        <function-ref name="getdt" scoped="" ref="0x40b1add0"/>
        <function-ref name="gett0" scoped="" ref="0x40b1ab78"/>
        <function-ref name="isRunning" scoped="" ref="0x40b1be18"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40b1b468"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40b1a600"/>
        <function-ref name="startOneShot" scoped="" ref="0x40b1b6e8"/>
        <function-ref name="stop" scoped="" ref="0x40b1b968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40af8a60" loc="48:/home/user/tinyos-main/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40af8a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b1d670"/>
        <function-ref name="fired" scoped="" ref="0x40b1e840"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40b1d010"/>
        <function-ref name="isOneShot" scoped="" ref="0x40b1ed10"/>
        <function-ref name="getdt" scoped="" ref="0x40b1db40"/>
        <function-ref name="gett0" scoped="" ref="0x40b1d8d8"/>
        <function-ref name="isRunning" scoped="" ref="0x40b1eaa8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40b1e0b8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40b1d340"/>
        <function-ref name="startOneShot" scoped="" ref="0x40b1e348"/>
        <function-ref name="stop" scoped="" ref="0x40b1e5d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x40b17460" loc="48:/home/user/tinyos-main/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x40b17460"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b17aa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40b17df8" loc="49:/home/user/tinyos-main/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40b17df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b16570"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40b16a60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40b167e8"/>
        <function-ref name="overflow" scoped="" ref="0x40b16cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x40b312f0" loc="20:/home/user/tinyos-main/tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x40b312f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a9900"/>
            <typename><typedef-ref name="TMilli" ref="0x403a9ac8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b31938"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40b33608" loc="46:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40b33608"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b337e0"/>
        <function-ref name="stopDone" scoped="" ref="0x40b338c0"/>
        <function-ref name="start" scoped="" ref="0x40b339a0"/>
        <function-ref name="stop" scoped="" ref="0x40b33a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40b33ee0" loc="47:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40b33ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40576960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b2e0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x40b2e1c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b2e2a0"/>
        <function-ref name="cancel" scoped="" ref="0x40b2e380"/>
        <function-ref name="sendDone" scoped="" ref="0x40b2e460"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40b49328" loc="49:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40b49328"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40b49500"/>
        <function-ref name="payloadLength" scoped="" ref="0x40b495e0"/>
        <function-ref name="getPayload" scoped="" ref="0x40b496c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b497a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40b49880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40b2c330" loc="48:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40b2c330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40576960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b2c508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40b3a840" loc="53:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40b3a840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40b3aa18"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40b3aaf8"/>
        <function-ref name="led1On" scoped="" ref="0x40b3abd8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40b3acb8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40b3ad98"/>
        <function-ref name="get" scoped="" ref="0x40b3ae78"/>
        <function-ref name="led1Off" scoped="" ref="0x40b2b010"/>
        <function-ref name="led2Off" scoped="" ref="0x40b2b390"/>
        <function-ref name="set" scoped="" ref="0x40b2b0f0"/>
        <function-ref name="led0On" scoped="" ref="0x40b2b1d0"/>
        <function-ref name="led2On" scoped="" ref="0x40b2b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40b3a308" loc="51:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40b3a308"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40b3a4e0"/>
        <function-ref name="noAck" scoped="" ref="0x40b3a5c0"/>
        <function-ref name="wasAcked" scoped="" ref="0x40b3a6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40b40140" loc="50:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40b40140"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40b40318"/>
        <function-ref name="source" scoped="" ref="0x40b403f8"/>
        <function-ref name="address" scoped="" ref="0x40b404d8"/>
        <function-ref name="destination" scoped="" ref="0x40b405b8"/>
        <function-ref name="setSource" scoped="" ref="0x40b40698"/>
        <function-ref name="setDestination" scoped="" ref="0x40b40778"/>
        <function-ref name="type" scoped="" ref="0x40b40858"/>
        <function-ref name="setType" scoped="" ref="0x40b40938"/>
        <function-ref name="isForMe" scoped="" ref="0x40b40a18"/>
        <function-ref name="setGroup" scoped="" ref="0x40b40af8"/>
        <function-ref name="localGroup" scoped="" ref="0x40b40bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40b76ed0" loc="54:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40b76ed0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b750c0"/>
        <function-ref name="getPayload" scoped="" ref="0x40b751a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b75280"/>
        <function-ref name="cancel" scoped="" ref="0x40b75360"/>
        <function-ref name="sendDone" scoped="" ref="0x40b75440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40b755a0" loc="55:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40b755a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b75778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40b3ebe8" loc="47:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40b3ebe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40576960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b3edd0"/>
        <function-ref name="getPayload" scoped="" ref="0x40b3eeb0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b3b010"/>
        <function-ref name="cancel" scoped="" ref="0x40b3b0f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40b3b1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40b76310" loc="50:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40b76310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40b764e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40b765c8"/>
        <function-ref name="getPayload" scoped="" ref="0x40b766a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b76788"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40b76868"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40b3b3a8" loc="48:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40b3b3a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40576960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b3b590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40b769a8" loc="51:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40b769a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40b76b80"/>
        <function-ref name="noAck" scoped="" ref="0x40b76c60"/>
        <function-ref name="wasAcked" scoped="" ref="0x40b76d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40b3b6d0" loc="49:/home/user/tinyos-main/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40b3b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40b3b8a8"/>
        <function-ref name="source" scoped="" ref="0x40b3b988"/>
        <function-ref name="address" scoped="" ref="0x40b3ba68"/>
        <function-ref name="destination" scoped="" ref="0x40b3bb48"/>
        <function-ref name="setSource" scoped="" ref="0x40b3bc28"/>
        <function-ref name="setDestination" scoped="" ref="0x40b3bd08"/>
        <function-ref name="type" scoped="" ref="0x40b3bde8"/>
        <function-ref name="setType" scoped="" ref="0x40b3bec8"/>
        <function-ref name="isForMe" scoped="" ref="0x40b76010"/>
        <function-ref name="setGroup" scoped="" ref="0x40b760f0"/>
        <function-ref name="localGroup" scoped="" ref="0x40b761d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40b74d18" loc="50:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40b74d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b74ef0"/>
        <function-ref name="stopDone" scoped="" ref="0x40b71010"/>
        <function-ref name="start" scoped="" ref="0x40b710f0"/>
        <function-ref name="stop" scoped="" ref="0x40b711d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40b71c20" loc="52:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40b71c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40575950"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b71df8"/>
        <function-ref name="getPayload" scoped="" ref="0x40b71ed8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b70010"/>
        <function-ref name="cancel" scoped="" ref="0x40b700f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40b701d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b74980" loc="49:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b74980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b74b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40b71618" loc="51:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40b71618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40575950"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b717f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40b92840" loc="56:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40b92840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40b92a18"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40b92af8"/>
        <function-ref name="led1On" scoped="" ref="0x40b92bd8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40b92cb8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40b92d98"/>
        <function-ref name="get" scoped="" ref="0x40b92e78"/>
        <function-ref name="led1Off" scoped="" ref="0x40b96010"/>
        <function-ref name="led2Off" scoped="" ref="0x40b96390"/>
        <function-ref name="set" scoped="" ref="0x40b960f0"/>
        <function-ref name="led0On" scoped="" ref="0x40b961d0"/>
        <function-ref name="led2On" scoped="" ref="0x40b962b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x40b92338" loc="55:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x40b92338"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40575950"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40b92510"/>
        <function-ref name="offset" scoped="" ref="0x40b925f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40b926d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40baade8" loc="66:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40baade8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40ba8010"/>
        <function-ref name="stopDone" scoped="" ref="0x40ba80f0"/>
        <function-ref name="start" scoped="" ref="0x40ba81d0"/>
        <function-ref name="stop" scoped="" ref="0x40ba82b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x40be6e58" loc="332:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x40be6e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40be5050"/>
        <function-ref name="runTask" scoped="" ref="0x40be5130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40b9cee0" loc="74:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x40b9cee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ba60e0"/>
        <function-ref name="stop" scoped="" ref="0x40ba61c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x40bb4300" loc="191:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x40bb4300"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40bb44d8"/>
        <function-ref name="runTask" scoped="" ref="0x40bb45b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40baaa50" loc="65:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40baaa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40baac28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x40ba6ec8" loc="75:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x40ba6ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x40b9d0c0"/>
        <function-ref name="flush" scoped="" ref="0x40b9d1a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x40bbf6a8" loc="322:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x40bbf6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40bbf880"/>
        <function-ref name="runTask" scoped="" ref="0x40bbf960"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x40b9e970" loc="72:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x40b9e970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40b9eb48"/>
        <function-ref name="resetSend" scoped="" ref="0x40b9ec28"/>
        <function-ref name="dataReceived" scoped="" ref="0x40b9ed08"/>
        <function-ref name="resetReceive" scoped="" ref="0x40b9ede8"/>
        <function-ref name="putData" scoped="" ref="0x40b9eec8"/>
        <function-ref name="putDone" scoped="" ref="0x40ba7010"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x40ba70f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40ba7260" loc="73:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40ba7260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40ba7438"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40ba7518"/>
        <function-ref name="led1On" scoped="" ref="0x40ba75f8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40ba76d8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40ba77b8"/>
        <function-ref name="get" scoped="" ref="0x40ba7898"/>
        <function-ref name="led1Off" scoped="" ref="0x40ba7978"/>
        <function-ref name="led2Off" scoped="" ref="0x40ba7cf8"/>
        <function-ref name="set" scoped="" ref="0x40ba7a58"/>
        <function-ref name="led0On" scoped="" ref="0x40ba7b38"/>
        <function-ref name="led2On" scoped="" ref="0x40ba7c18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x40be3ac0" loc="341:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x40be3ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40be3c98"/>
        <function-ref name="runTask" scoped="" ref="0x40be3d78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x40ba45b8" loc="67:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x40ba45b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x40ba4790"/>
        <function-ref name="nextByte" scoped="" ref="0x40ba4870"/>
        <function-ref name="startSend" scoped="" ref="0x40ba4950"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40ba4a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x40ba2778" loc="68:/home/user/tinyos-main/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40ba2778"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40ba2950"/>
        <function-ref name="byteReceived" scoped="" ref="0x40ba2a30"/>
        <function-ref name="endPacket" scoped="" ref="0x40ba2b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x40c3ee48" loc="275:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x40c3ee48"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40c3d050"/>
        <function-ref name="runTask" scoped="" ref="0x40c3d130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40c40a90" loc="51:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40c40a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40575950"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c40c78"/>
        <function-ref name="getPayload" scoped="" ref="0x40c40d58"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c40e38"/>
        <function-ref name="cancel" scoped="" ref="0x40c40f18"/>
        <function-ref name="sendDone" scoped="" ref="0x40c3f010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x40c3d2b0" loc="158:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x40c3d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40c3d488"/>
        <function-ref name="runTask" scoped="" ref="0x40c3d568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40c406d0" loc="50:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40c406d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40575950"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40c408b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x40c3f238" loc="54:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x40c3f238"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x40575950"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40c3f420"/>
        <function-ref name="offset" scoped="" ref="0x40c3f500"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40c3f5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40c3e230" loc="57:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40c3e230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40c3e408"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40c3e4e8"/>
        <function-ref name="led1On" scoped="" ref="0x40c3e5c8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40c3e6a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40c3e788"/>
        <function-ref name="get" scoped="" ref="0x40c3e868"/>
        <function-ref name="led1Off" scoped="" ref="0x40c3e948"/>
        <function-ref name="led2On" scoped="" ref="0x40c3ecc8"/>
        <function-ref name="set" scoped="" ref="0x40c3eb08"/>
        <function-ref name="led2Off" scoped="" ref="0x40c3ea28"/>
        <function-ref name="led0On" scoped="" ref="0x40c3ebe8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x40c3fbf8" loc="56:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x40c3fbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x40c3fdd0"/>
        <function-ref name="nextByte" scoped="" ref="0x40c3feb0"/>
        <function-ref name="startSend" scoped="" ref="0x40c3e010"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40c3e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x40c3f720" loc="55:/home/user/tinyos-main/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40c3f720"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40c3f8f8"/>
        <function-ref name="byteReceived" scoped="" ref="0x40c3f9d8"/>
        <function-ref name="endPacket" scoped="" ref="0x40c3fab8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x40c5c990" loc="50:/home/user/tinyos-main/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40c5c990"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c5cb68"/>
        <function-ref name="receivedByte" scoped="" ref="0x40c5cc48"/>
        <function-ref name="receive" scoped="" ref="0x40c5cd28"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40c5ce08"/>
        <function-ref name="receiveDone" scoped="" ref="0x40c5cee8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40c62010"/>
        <function-ref name="sendDone" scoped="" ref="0x40c620f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x40c3c6a8" loc="48:/home/user/tinyos-main/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x40c3c6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40c3c880"/>
        <function-ref name="resetSend" scoped="" ref="0x40c3c960"/>
        <function-ref name="dataReceived" scoped="" ref="0x40c3ca40"/>
        <function-ref name="resetReceive" scoped="" ref="0x40c3cb20"/>
        <function-ref name="putData" scoped="" ref="0x40c3cc00"/>
        <function-ref name="putDone" scoped="" ref="0x40c3cce0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x40c3cdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40c62260" loc="51:/home/user/tinyos-main/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40c62260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40c62438"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40c62518"/>
        <function-ref name="led1On" scoped="" ref="0x40c625f8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40c626d8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40c627b8"/>
        <function-ref name="get" scoped="" ref="0x40c62898"/>
        <function-ref name="led1Off" scoped="" ref="0x40c62978"/>
        <function-ref name="led2Off" scoped="" ref="0x40c62cf8"/>
        <function-ref name="set" scoped="" ref="0x40c62a58"/>
        <function-ref name="led0On" scoped="" ref="0x40c62b38"/>
        <function-ref name="led2On" scoped="" ref="0x40c62c18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40c73488" loc="42:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40c73488"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c73660"/>
        <function-ref name="receive" scoped="" ref="0x40c73740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40c775e8" loc="41:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40c775e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c777c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x40c778a0"/>
        <function-ref name="receive" scoped="" ref="0x40c77980"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40c77a60"/>
        <function-ref name="receiveDone" scoped="" ref="0x40c77b40"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40c77c20"/>
        <function-ref name="sendDone" scoped="" ref="0x40c77d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40c77168" loc="40:/home/user/tinyos-main/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40c77168"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c77340"/>
        <function-ref name="stop" scoped="" ref="0x40c77420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40c72308" loc="41:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40c72308"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c724e0"/>
        <function-ref name="receive" scoped="" ref="0x40c725c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40c72788" loc="42:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40c72788"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c72960"/>
        <function-ref name="receivedByte" scoped="" ref="0x40c72a40"/>
        <function-ref name="receive" scoped="" ref="0x40c72b20"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40c72c00"/>
        <function-ref name="receiveDone" scoped="" ref="0x40c72ce0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40c72dc0"/>
        <function-ref name="sendDone" scoped="" ref="0x40c72ea0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40c70218" loc="43:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40c70218"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TMicro" ref="0x403a7370"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40c70968"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40c70e58"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40c70be0"/>
        <function-ref name="overflow" scoped="" ref="0x40c6f110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40c73e88" loc="40:/home/user/tinyos-main/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40c73e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c72070"/>
        <function-ref name="stop" scoped="" ref="0x40c72150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40c6eae8" loc="50:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40c6eae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c6ecc0"/>
        <function-ref name="receive" scoped="" ref="0x40c6eda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x40c6d7b0" loc="53:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x40c6d7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c6d988"/>
        <function-ref name="stop" scoped="" ref="0x40c6da68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40c6e398" loc="48:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40c6e398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40c6e570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40c6ef00" loc="51:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40c6ef00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c6d0f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x40c6d1d0"/>
        <function-ref name="receive" scoped="" ref="0x40c6d2b0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40c6d390"/>
        <function-ref name="receiveDone" scoped="" ref="0x40c6d470"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40c6d550"/>
        <function-ref name="sendDone" scoped="" ref="0x40c6d630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40c9cc88" loc="56:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40c9cc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TMicro" ref="0x403a7370"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40c9a3f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40c9a8e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40c9a668"/>
        <function-ref name="overflow" scoped="" ref="0x40c9ab58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x40c9c050" loc="55:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x40c9c050"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40c9c228"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40c9c308"/>
        <function-ref name="rxDone" scoped="" ref="0x40c9c3e8"/>
        <function-ref name="txDone" scoped="" ref="0x40c9c4c8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40c9c5a8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40c9c688"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40c9c768"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40c9c848"/>
        <function-ref name="tx" scoped="" ref="0x40c9c928"/>
        <function-ref name="rx" scoped="" ref="0x40c9ca08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40c6e6d0" loc="49:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40c6e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c6e8a8"/>
        <function-ref name="stop" scoped="" ref="0x40c6e988"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x40c6dbe8" loc="54:/home/user/tinyos-main/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x40c6dbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c6ddc0"/>
        <function-ref name="stop" scoped="" ref="0x40c6dea0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x40cb30b8" loc="49:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x40cb30b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40cb3290"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40cb3370"/>
        <function-ref name="rxDone" scoped="" ref="0x40cb3450"/>
        <function-ref name="txDone" scoped="" ref="0x40cb3530"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40cb3610"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40cb36f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40cb37d0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40cb38b0"/>
        <function-ref name="tx" scoped="" ref="0x40cb3990"/>
        <function-ref name="rx" scoped="" ref="0x40cb3a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x40cb2760" loc="53:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x40cb2760"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40cb2938"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40cb2a18"/>
        <function-ref name="rxDone" scoped="" ref="0x40cb2af8"/>
        <function-ref name="txDone" scoped="" ref="0x40cb2bd8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40cb2cb8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40cb2d98"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40cb2e78"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40cb1010"/>
        <function-ref name="tx" scoped="" ref="0x40cb10f0"/>
        <function-ref name="rx" scoped="" ref="0x40cb11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x40cb4b98" loc="48:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x40cb4b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cb4d70"/>
        <function-ref name="stop" scoped="" ref="0x40cb4e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x40cb3cc8" loc="51:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x40cb3cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cb3ea0"/>
        <function-ref name="stop" scoped="" ref="0x40cb2010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x40cb2268" loc="52:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x40cb2268"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cb2440"/>
        <function-ref name="stop" scoped="" ref="0x40cb2520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x40cb4688" loc="47:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x40cb4688"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cb4860"/>
        <function-ref name="stop" scoped="" ref="0x40cb4940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x40cb19b8" loc="80:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x40cb19b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40cb1b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x40cad880" loc="83:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x40cad880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40cada58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40cadb38"/>
        <function-ref name="rxDone" scoped="" ref="0x40cadc18"/>
        <function-ref name="txDone" scoped="" ref="0x40cadcf8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40caddd8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40cadeb8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40cac010"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40cac0f0"/>
        <function-ref name="tx" scoped="" ref="0x40cac1d0"/>
        <function-ref name="rx" scoped="" ref="0x40cac2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x40cac4c0" loc="85:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x40cac4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40cac698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x40cab390" loc="88:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x40cab390"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40cab568"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40cab648"/>
        <function-ref name="rxDone" scoped="" ref="0x40cab728"/>
        <function-ref name="txDone" scoped="" ref="0x40cab808"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40cab8e8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40cab9c8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40cabaa8"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40cabb88"/>
        <function-ref name="tx" scoped="" ref="0x40cabc68"/>
        <function-ref name="rx" scoped="" ref="0x40cabd48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x40cad368" loc="82:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x40cad368"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cad540"/>
        <function-ref name="stop" scoped="" ref="0x40cad620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x40cac910" loc="86:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x40cac910"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cacae8"/>
        <function-ref name="stop" scoped="" ref="0x40cacbc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x40cace40" loc="87:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x40cace40"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cab050"/>
        <function-ref name="stop" scoped="" ref="0x40cab130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x40caa010" loc="90:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40caa010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40caa1e8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40caa2c8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40caa3a8"/>
        <function-ref name="actualMicro" scoped="" ref="0x40caa488"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40caa568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40caa750" loc="91:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40caa750"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40caa928"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x40cb1e08" loc="81:/home/user/tinyos-main/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x40cb1e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40cad010"/>
        <function-ref name="stop" scoped="" ref="0x40cad0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40cfaa18" loc="24:/home/user/tinyos-main/tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40cfaa18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TMicro" ref="0x403a7370"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40cf7200"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40cf76f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40cf7478"/>
        <function-ref name="overflow" scoped="" ref="0x40cf7968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40cf44d0" loc="24:/home/user/tinyos-main/tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40cf44d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TThree" ref="0x403c9bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40cf4c20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40cf3130"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40cf4e98"/>
        <function-ref name="overflow" scoped="" ref="0x40cf33a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40ce7e28" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40ce7e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40cec050"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x40cec130"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40cec210"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x40cec2f0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40cec3d0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40cec4b0"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x40cec590"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x40cec670"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x40cec750"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x40cec830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40d0ec38" loc="47:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x40d0ec38"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x40ce6778"/>
        <function-ref name="test" scoped="" ref="0x40ce6288"/>
        <function-ref name="get" scoped="" ref="0x40ceb298"/>
        <function-ref name="captured" scoped="" ref="0x40ceb7b0"/>
        <function-ref name="reset" scoped="" ref="0x40ceba50"/>
        <function-ref name="isOn" scoped="" ref="0x40ce6500"/>
        <function-ref name="set" scoped="" ref="0x40ceb510"/>
        <function-ref name="start" scoped="" ref="0x40cebcc8"/>
        <function-ref name="stop" scoped="" ref="0x40ce6010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40ce6e88" loc="48:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40ce6e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40d0b418"/>
        <function-ref name="fired" scoped="" ref="0x40d0ca10"/>
        <function-ref name="get" scoped="" ref="0x40d0c4f8"/>
        <function-ref name="reset" scoped="" ref="0x40d0cc88"/>
        <function-ref name="isOn" scoped="" ref="0x40d0b690"/>
        <function-ref name="set" scoped="" ref="0x40d0c770"/>
        <function-ref name="start" scoped="" ref="0x40d0cf00"/>
        <function-ref name="stop" scoped="" ref="0x40d0b1a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40cf3df8" loc="45:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40cf3df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40cee878"/>
        <function-ref name="test" scoped="" ref="0x40cee388"/>
        <function-ref name="get" scoped="" ref="0x40cef468"/>
        <function-ref name="setScale" scoped="" ref="0x40ceeaf0"/>
        <function-ref name="getScale" scoped="" ref="0x40ceed90"/>
        <function-ref name="reset" scoped="" ref="0x40cefbf8"/>
        <function-ref name="overflow" scoped="" ref="0x40cef980"/>
        <function-ref name="isOn" scoped="" ref="0x40cee600"/>
        <function-ref name="set" scoped="" ref="0x40cef6e0"/>
        <function-ref name="start" scoped="" ref="0x40cefe70"/>
        <function-ref name="stop" scoped="" ref="0x40cee110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40d053c8" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40d053c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40d055a0"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x40d05680"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40d05760"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x40d05840"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40d05920"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40d05a00"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x40d05ae0"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x40d05bc0"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x40d05ca0"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x40d05d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x40d01010" loc="48:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x40d01010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40d00578"/>
        <function-ref name="fired" scoped="" ref="0x40d01b70"/>
        <function-ref name="get" scoped="" ref="0x40d01658"/>
        <function-ref name="reset" scoped="" ref="0x40d01de8"/>
        <function-ref name="isOn" scoped="" ref="0x40d007f0"/>
        <function-ref name="set" scoped="" ref="0x40d018d0"/>
        <function-ref name="start" scoped="" ref="0x40d00088"/>
        <function-ref name="stop" scoped="" ref="0x40d00300"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40d040f0" loc="47:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x40d040f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x40d03b80"/>
        <function-ref name="test" scoped="" ref="0x40d03690"/>
        <function-ref name="get" scoped="" ref="0x40d04738"/>
        <function-ref name="captured" scoped="" ref="0x40d04c50"/>
        <function-ref name="reset" scoped="" ref="0x40d04ef0"/>
        <function-ref name="isOn" scoped="" ref="0x40d03908"/>
        <function-ref name="set" scoped="" ref="0x40d049b0"/>
        <function-ref name="start" scoped="" ref="0x40d031a0"/>
        <function-ref name="stop" scoped="" ref="0x40d03418"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x40d00c08" loc="49:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x40d00c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40cfd1a0"/>
        <function-ref name="fired" scoped="" ref="0x40cff790"/>
        <function-ref name="get" scoped="" ref="0x40cff278"/>
        <function-ref name="reset" scoped="" ref="0x40cffa08"/>
        <function-ref name="isOn" scoped="" ref="0x40cfd418"/>
        <function-ref name="set" scoped="" ref="0x40cff4f0"/>
        <function-ref name="start" scoped="" ref="0x40cffc80"/>
        <function-ref name="stop" scoped="" ref="0x40cffef8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x40cfd830" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x40cfd830"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40cfcd90"/>
        <function-ref name="fired" scoped="" ref="0x40cfc3b0"/>
        <function-ref name="get" scoped="" ref="0x40cfde78"/>
        <function-ref name="reset" scoped="" ref="0x40cfc628"/>
        <function-ref name="isOn" scoped="" ref="0x40cfb048"/>
        <function-ref name="set" scoped="" ref="0x40cfc110"/>
        <function-ref name="start" scoped="" ref="0x40cfc8a0"/>
        <function-ref name="stop" scoped="" ref="0x40cfcb18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40d080e0" loc="45:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40d080e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40d06b30"/>
        <function-ref name="test" scoped="" ref="0x40d06640"/>
        <function-ref name="get" scoped="" ref="0x40d08728"/>
        <function-ref name="setScale" scoped="" ref="0x40d06da8"/>
        <function-ref name="getScale" scoped="" ref="0x40d05068"/>
        <function-ref name="reset" scoped="" ref="0x40d08eb8"/>
        <function-ref name="overflow" scoped="" ref="0x40d08c40"/>
        <function-ref name="isOn" scoped="" ref="0x40d068b8"/>
        <function-ref name="set" scoped="" ref="0x40d089a0"/>
        <function-ref name="start" scoped="" ref="0x40d06150"/>
        <function-ref name="stop" scoped="" ref="0x40d063c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40d672b0" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40d672b0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x4034f5d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x4034f5d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40d67488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40d67698" loc="47:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40d67698"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40d5e1a0"/>
        <function-ref name="test" scoped="" ref="0x40d66c90"/>
        <function-ref name="get" scoped="" ref="0x40d67ce0"/>
        <function-ref name="setScale" scoped="" ref="0x40d5e418"/>
        <function-ref name="getScale" scoped="" ref="0x40d5e6b8"/>
        <function-ref name="reset" scoped="" ref="0x40d66528"/>
        <function-ref name="overflow" scoped="" ref="0x40d662b0"/>
        <function-ref name="isOn" scoped="" ref="0x40d66f08"/>
        <function-ref name="set" scoped="" ref="0x40d66010"/>
        <function-ref name="start" scoped="" ref="0x40d667a0"/>
        <function-ref name="stop" scoped="" ref="0x40d66a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40d80f10" loc="45:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40d80f10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TThree" ref="0x403c9bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40d69680"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40d69b70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40d698f8"/>
        <function-ref name="overflow" scoped="" ref="0x40d69de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40d5b0e0" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40d5b0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40d7eb30"/>
        <function-ref name="test" scoped="" ref="0x40d7e640"/>
        <function-ref name="get" scoped="" ref="0x40d5b728"/>
        <function-ref name="setScale" scoped="" ref="0x40d7eda8"/>
        <function-ref name="getScale" scoped="" ref="0x40d7d068"/>
        <function-ref name="reset" scoped="" ref="0x40d5beb8"/>
        <function-ref name="overflow" scoped="" ref="0x40d5bc40"/>
        <function-ref name="isOn" scoped="" ref="0x40d7e8b8"/>
        <function-ref name="set" scoped="" ref="0x40d5b9a0"/>
        <function-ref name="start" scoped="" ref="0x40d7e150"/>
        <function-ref name="stop" scoped="" ref="0x40d7e3c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x40d7b5f8" loc="63:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x40d7b5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TThree" ref="0x403c9bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40d7bd48"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40d99288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40d99010"/>
        <function-ref name="overflow" scoped="" ref="0x40d99500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40d7c320" loc="62:/home/user/tinyos-main/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40d7c320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a71a8"/>
            <typename><typedef-ref name="TMicro" ref="0x403a7370"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40d7ca70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40d7b010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40d7cce8"/>
        <function-ref name="overflow" scoped="" ref="0x40d7b288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x40d98d50" loc="47:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x40d98d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40d98f28"/>
        <function-ref name="offset" scoped="" ref="0x40d95018"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40d950f8"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:/home/user/tinyos-main/tos/interfaces/Init.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x403feb80" loc="62:/home/user/tinyos-main/tos/interfaces/Init.nc">
        <documentation loc="53:/home/user/tinyos-main/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/home/user/tinyos-main/tos/interfaces/Boot.nc">
      <documentation loc="42:/home/user/tinyos-main/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x403fe010" loc="60:/home/user/tinyos-main/tos/interfaces/Boot.nc">
        <documentation loc="51:/home/user/tinyos-main/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x4040d710" loc="60:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x4040d5b8" loc="60:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x40407cf8" loc="31:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x4040e348" loc="39:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x4040e1f0" loc="39:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x4040ea10" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x4040e8b8" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x4040d010" loc="53:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/home/user/tinyos-main/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x40416b50" loc="44:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x40415010" loc="45:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x404163c0" loc="42:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x404157e0" loc="47:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40416780" loc="43:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x404153e8" loc="46:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4040fc48" loc="40:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x40416010" loc="41:/home/user/tinyos-main/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x40352390" loc="57:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x40352c98" loc="72:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x403527d0" loc="65:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/home/user/tinyos-main/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/home/user/tinyos-main/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x40353b68" loc="67:/home/user/tinyos-main/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/home/user/tinyos-main/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x40358090" loc="75:/home/user/tinyos-main/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/home/user/tinyos-main/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/home/user/tinyos-main/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/home/user/tinyos-main/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x403cb7e8" loc="76:/home/user/tinyos-main/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/home/user/tinyos-main/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/home/user/tinyos-main/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/home/user/tinyos-main/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x403e0bb8" loc="62:/home/user/tinyos-main/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/home/user/tinyos-main/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x40391340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/home/user/tinyos-main/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/home/user/tinyos-main/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x403dbe70" loc="52:/home/user/tinyos-main/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/home/user/tinyos-main/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x40579800" loc="80:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
        <documentation loc="60:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x405792a0" loc="80:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x405794b8" loc="80:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40579698" loc="80:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x405883c8" loc="135:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
        <documentation loc="126:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40588068" loc="135:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40588248" loc="135:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x40577ad0" loc="123:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
        <documentation loc="113:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x405784c0" loc="96:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
        <documentation loc="82:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40578368" loc="96:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x405771c8" loc="110:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
        <documentation loc="98:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40578e58" loc="110:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x40577068" loc="110:/home/user/tinyos-main/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x40584b30" loc="113:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x405849d8" loc="113:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x405838a8" loc="138:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40583750" loc="138:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x405842f0" loc="104:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40583070" loc="130:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/home/user/tinyos-main/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/home/user/tinyos-main/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40544010" loc="53:/home/user/tinyos-main/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40544010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x405444f0" loc="61:/home/user/tinyos-main/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/home/user/tinyos-main/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ECC" loc="34:ECC.nc">
      <documentation loc="26:ECC.nc">
        <short>&#10; Interface for ECC operation&#10; $Id: ECC.nc,v 1.6 2007/11/02 22:36:39 aliu3 Exp $&#10;</short>
      </documentation>
      <function command="" provided="0" name="get_param" ref="0x40537e38" loc="100:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:150" alignment="I:1"><struct-ref name="Params" ref="0x403f70b0"/>
              <typename><typedef-ref name="Params" ref="0x403f6248"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="point2octet" ref="0x40524560" loc="45:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="octet" ref="0x40526da8" loc="45:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="octet_len" ref="0x40524010" loc="45:ECC.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="P" ref="0x405241f0" loc="45:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="compress" ref="0x405243f0" loc="45:ECC.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="win_mul" ref="0x4052cc78" loc="85:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P0" ref="0x4052c6d8" loc="85:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x4052c8d8" loc="85:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="pointArray" ref="0x4052cb10" loc="85:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="gen_private_key" ref="0x40526188" loc="40:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="PrivateKey" ref="0x40526030" loc="40:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="win_mul_Z" ref="0x40537a18" loc="94:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:21" alignment="I:1"><struct-ref name="ZCoordinate" ref="0x403f87f8"/>
                <typename><typedef-ref name="ZCoordinate" ref="0x403f8ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P0" ref="0x40537230" loc="94:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x40537430" loc="94:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="pointArray" ref="0x40537668" loc="94:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ZList" ref="0x405378a8" loc="94:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:21" alignment="I:1"><struct-ref name="ZCoordinate" ref="0x403f87f8"/>
                <typename><typedef-ref name="ZCoordinate" ref="0x403f8ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="octet2point" ref="0x40524e90" loc="47:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P" ref="0x40524938" loc="47:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="octet" ref="0x40524b50" loc="47:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="octet_len" ref="0x40524d28" loc="47:ECC.nc">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x40529ba0" loc="38:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="add_proj" ref="0x4052e5a0" loc="69:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P0" ref="0x40530a28" loc="69:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="Z0" ref="0x40530c30" loc="69:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="P1" ref="0x40530e18" loc="69:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="Z1" ref="0x4052e030" loc="69:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="P2" ref="0x4052e218" loc="69:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="Z2" ref="0x4052e420" loc="69:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="BarrettSetBuf" ref="0x40523d40" loc="54:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="point_is_zero" ref="0x40523968" loc="51:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P" ref="0x40523810" loc="51:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="mul" ref="0x4052da70" loc="76:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P0" ref="0x4052d520" loc="76:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="P1" ref="0x4052d708" loc="76:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x4052d908" loc="76:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dbl_proj" ref="0x4052d180" loc="72:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P0" ref="0x4052e978" loc="72:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="Z0" ref="0x4052eb80" loc="72:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="P1" ref="0x4052ed68" loc="72:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="Z1" ref="0x4052d010" loc="72:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="win_mul_base" ref="0x4052a408" loc="88:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P0" ref="0x4052a0a8" loc="88:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x4052a2a8" loc="88:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="check_point" ref="0x405233f0" loc="49:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P" ref="0x40523298" loc="49:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="win_precompute_Z" ref="0x4052ae30" loc="92:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:21" alignment="I:1"><struct-ref name="ZCoordinate" ref="0x403f87f8"/>
                <typename><typedef-ref name="ZCoordinate" ref="0x403f8ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baseP" ref="0x4052a850" loc="92:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pointArray" ref="0x4052aa88" loc="92:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ZList" ref="0x4052acc8" loc="92:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:21" alignment="I:1"><struct-ref name="ZCoordinate" ref="0x403f87f8"/>
                <typename><typedef-ref name="ZCoordinate" ref="0x403f8ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="add" ref="0x40530650" loc="58:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="P0" ref="0x40530118" loc="58:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="P1" ref="0x40530300" loc="58:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="P2" ref="0x405304e8" loc="58:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="gen_public_key" ref="0x40526988" loc="42:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="PublicKey" ref="0x405265d0" loc="42:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="PrivateKey" ref="0x40526828" loc="42:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="win_precompute" ref="0x4052c270" loc="80:ECC.nc">
        <interfacedef-ref qname="ECC"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baseP" ref="0x4052dea0" loc="80:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pointArray" ref="0x4052c110" loc="80:ECC.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:/home/user/tinyos-main/tos/interfaces/Random.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x40538b08" loc="52:/home/user/tinyos-main/tos/interfaces/Random.nc">
        <documentation loc="48:/home/user/tinyos-main/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x40538660" loc="46:/home/user/tinyos-main/tos/interfaces/Random.nc">
        <documentation loc="42:/home/user/tinyos-main/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40531308" loc="53:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40531308"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x4053ba28" loc="136:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="132:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x4053d8a8" loc="83:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="80:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x4053ca00" loc="114:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="100:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x4053c6b8" loc="114:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x4053c8a0" loc="114:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x4053c210" loc="98:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="94:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x4053a3e8" loc="151:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="146:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x4053be70" loc="144:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="138:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x4053dd38" loc="92:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="86:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x40531960" loc="64:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="56:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40531808" loc="64:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x4053b408" loc="129:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="116:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x4053b0c0" loc="129:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x4053b2a8" loc="129:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x4053d010" loc="73:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="66:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40531ea0" loc="73:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x4053d4e0" loc="78:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
        <documentation loc="75:/home/user/tinyos-main/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NN" loc="36:NN.nc">
      <documentation loc="1:NN.h">
        <short>&#10; All new code in this distribution is Copyright 2005 by North Carolina&#10; State University.</short>
        <long>&#10; All new code in this distribution is Copyright 2005 by North Carolina&#10; State University. All rights reserved. Redistribution and use in&#10; source and binary forms are permitted provided that this entire&#10; copyright notice is duplicated in all such copies, and that any&#10; documentation, announcements, and other materials related to such&#10; distribution and use acknowledge that the software was developed at&#10; North Carolina State University, Raleigh, NC. No charge may be made&#10; for copies, derivations, or distributions of this material without the&#10; express written consent of the copyright holder. Neither the name of&#10; the University nor the name of the author may be used to endorse or&#10; promote products derived from this material without specific prior&#10; written permission.&#10; IN NO EVENT SHALL THE NORTH CAROLINA STATE UNIVERSITY BE LIABLE TO ANY&#10; PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL&#10; DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,&#10; EVEN IF THE NORTH CAROLINA STATE UNIVERSITY HAS BEEN ADVISED OF THE&#10; POSSIBILITY OF SUCH DAMAGE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN&#10; &#34;AS IS&#34; BASIS, AND THE NORTH CAROLINA STATE UNIVERSITY HAS NO&#10; OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR&#10; MODIFICATIONS. &#34;&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="ModSqr" ref="0x40519b78" loc="97:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40519408" loc="97:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40519608" loc="97:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x40519808" loc="97:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40519a08" loc="97:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="LShift" ref="0x4050c010" loc="65:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4050d840" loc="65:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x4050da40" loc="65:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x4050dc10" loc="65:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="digits" ref="0x4050de10" loc="65:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModSmall" ref="0x40514e08" loc="81:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="b" ref="0x405148a0" loc="81:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40514aa0" loc="81:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40514ca0" loc="81:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Gcd" ref="0x40522180" loc="105:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40515938" loc="105:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40515b38" loc="105:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40515d38" loc="105:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40522010" loc="105:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModExp" ref="0x405169a0" loc="101:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40518d88" loc="101:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40516010" loc="101:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40516210" loc="101:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="cDigits" ref="0x40516418" loc="101:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="d" ref="0x40516618" loc="101:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="dDigits" ref="0x40516820" loc="101:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModNeg" ref="0x40510580" loc="87:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40512d60" loc="87:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40510010" loc="87:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40510210" loc="87:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40510410" loc="87:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="AddDigitMult" ref="0x4050a968" loc="69:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4050a010" loc="69:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x4050a210" loc="69:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x4050a3f0" loc="69:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
            </type-int>
          </variable>
          <variable name="d" ref="0x4050a5f0" loc="69:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4050a7f0" loc="69:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModBarrett" ref="0x405144b0" loc="79:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40508ae0" loc="79:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40508ce0" loc="79:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="bDigits" ref="0x40508ee8" loc="79:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="c" ref="0x40514130" loc="79:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="cDigits" ref="0x40514338" loc="79:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Digits" ref="0x4051edd0" loc="123:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4051ea70" loc="123:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4051ec70" loc="123:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModSub" ref="0x40512988" loc="85:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40512010" loc="85:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40512210" loc="85:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40512410" loc="85:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x40512610" loc="85:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40512810" loc="85:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModDiv" ref="0x4050e188" loc="91:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4050f760" loc="91:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x4050f960" loc="91:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x4050fb60" loc="91:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x4050fd60" loc="91:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4050e010" loc="91:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Cmp" ref="0x40520950" loc="113:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x405203e8" loc="113:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x405205e8" loc="113:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x405207e8" loc="113:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModBarrettInit" ref="0x40508178" loc="75:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:45" alignment="I:1"><struct-ref name="Barrett" ref="0x403f4d70"/>
                <typename><typedef-ref name="Barrett" ref="0x403f28f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x40509bb0" loc="75:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="cDigits" ref="0x40509db8" loc="75:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="pbuf" ref="0x40508010" loc="75:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:45" alignment="I:1"><struct-ref name="Barrett" ref="0x403f4d70"/>
                <typename><typedef-ref name="Barrett" ref="0x403f28f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="AssignDigit" ref="0x40504178" loc="49:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40506bb8" loc="49:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40506d98" loc="49:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
            </type-int>
          </variable>
          <variable name="digits" ref="0x40504010" loc="49:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="BarrettSetBuf" ref="0x405086f0" loc="77:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:45" alignment="I:1"><struct-ref name="Barrett" ref="0x403f4d70"/>
                <typename><typedef-ref name="Barrett" ref="0x403f28f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pbuf" ref="0x40508598" loc="77:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:45" alignment="I:1"><struct-ref name="Barrett" ref="0x403f4d70"/>
                <typename><typedef-ref name="Barrett" ref="0x403f28f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModMult" ref="0x4050f388" loc="89:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40510960" loc="89:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40510b60" loc="89:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40510d60" loc="89:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x4050f010" loc="89:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4050f210" loc="89:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Sub" ref="0x40502950" loc="59:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x405021e0" loc="59:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x405023e0" loc="59:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x405025e0" loc="59:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x405027e0" loc="59:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Mult" ref="0x405004a0" loc="61:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40502d18" loc="61:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40502f18" loc="61:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40500130" loc="61:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40500330" loc="61:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModMultOpt" ref="0x4051a190" loc="93:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4050e588" loc="93:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x4050e788" loc="93:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x4050e988" loc="93:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x4050eb88" loc="93:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="omega" ref="0x4050edb0" loc="93:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4051a010" loc="93:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Assign" ref="0x405067b0" loc="47:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40506248" loc="47:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40506448" loc="47:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40506648" loc="47:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Decode" ref="0x404fa360" loc="41:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x404fdba0" loc="41:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x404fdda0" loc="41:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x404fa010" loc="41:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x404fa1f0" loc="41:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Encode" ref="0x404fae50" loc="43:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x404fa700" loc="43:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x404fa900" loc="43:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x404fab00" loc="43:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x404face0" loc="43:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Assign2Exp" ref="0x40503230" loc="53:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="NN_UINT2" ref="0x403f4b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40504cd8" loc="53:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40504eb8" loc="53:NN.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="NN_UINT2" ref="0x403f4b68"/></typename>
            </type-int>
          </variable>
          <variable name="digits" ref="0x405030c8" loc="53:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Mod" ref="0x40509798" loc="73:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4050adb0" loc="73:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40509010" loc="73:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="bDigits" ref="0x40509218" loc="73:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="c" ref="0x40509418" loc="73:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="cDigits" ref="0x40509620" loc="73:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModSqrRootOpt" ref="0x40520010" loc="107:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40522590" loc="107:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40522790" loc="107:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40522990" loc="107:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40522b90" loc="107:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="omega" ref="0x40522db8" loc="107:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Div" ref="0x4050d410" loc="63:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40500858" loc="63:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40500a58" loc="63:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40500c58" loc="63:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="cDigits" ref="0x40500e60" loc="63:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="d" ref="0x4050d088" loc="63:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="dDigits" ref="0x4050d290" loc="63:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Add" ref="0x40503dc0" loc="57:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40503650" loc="57:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40503850" loc="57:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40503a50" loc="57:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40503c50" loc="57:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModAdd" ref="0x40513b78" loc="83:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40513200" loc="83:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40513400" loc="83:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40513600" loc="83:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x40513800" loc="83:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40513a00" loc="83:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="One" ref="0x4051f7a8" loc="117:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4051f448" loc="117:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4051f648" loc="117:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Bits" ref="0x4051fef0" loc="119:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4051fb90" loc="119:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4051fd90" loc="119:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="TestBit" ref="0x4051e678" loc="121:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="short" size="I:2" alignment="I:1">
              <typename><typedef-ref name="int16_t" ref="0x40210e80"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4051e348" loc="121:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="i" ref="0x4051e518" loc="121:NN.nc">
            <type-int cname="short" size="I:2" alignment="I:1">
              <typename><typedef-ref name="int16_t" ref="0x40210e80"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Equal" ref="0x4051c748" loc="125:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4051c1e0" loc="125:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x4051c3e0" loc="125:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4051c5e0" loc="125:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModSqrOpt" ref="0x405189b0" loc="99:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40518010" loc="99:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40518210" loc="99:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x40518410" loc="99:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="omega" ref="0x40518638" loc="99:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40518838" loc="99:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="AssignZero" ref="0x405048d8" loc="51:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40504578" loc="51:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40504778" loc="51:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="RShift" ref="0x4050cb80" loc="67:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4050c440" loc="67:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x4050c640" loc="67:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x4050c810" loc="67:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
          <variable name="digits" ref="0x4050ca10" loc="67:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModDivOpt" ref="0x4051af00" loc="95:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4051a588" loc="95:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x4051a788" loc="95:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x4051a988" loc="95:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x4051ab88" loc="95:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4051ad88" loc="95:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="ModInv" ref="0x40515580" loc="103:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40516d78" loc="103:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x40515010" loc="103:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="c" ref="0x40515210" loc="103:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40515410" loc="103:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Even" ref="0x4051ce70" loc="127:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x4051cb10" loc="127:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x4051cd10" loc="127:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="Zero" ref="0x4051f090" loc="115:NN.nc">
        <interfacedef-ref qname="NN"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x40520d18" loc="115:NN.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x40520f18" loc="115:NN.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/home/user/tinyos-main/tos/interfaces/Leds.nc">
      <documentation loc="33:/home/user/tinyos-main/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x4053f340" loc="61:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="58:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x4053f788" loc="67:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="63:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x4053fc08" loc="72:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="69:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x4054c4b8" loc="83:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="79:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x4054b1c8" loc="100:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="96:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4054b670" loc="117:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="103:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x4054c070" loc="77:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="74:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4054bdb0" loc="134:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="120:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x4054bc58" loc="134:/home/user/tinyos-main/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x40540ec8" loc="56:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="53:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x4054c938" loc="89:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="86:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x4054cd60" loc="94:/home/user/tinyos-main/tos/interfaces/Leds.nc">
        <documentation loc="91:/home/user/tinyos-main/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ECDSA" loc="35:ECDSA.nc">
      <documentation loc="26:ECDSA.nc">
        <short>&#10; interface for ECDSA&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10;</short>
      </documentation>
      <function command="" provided="0" name="sign" ref="0x40533788" loc="41:ECDSA.nc">
        <interfacedef-ref qname="ECDSA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40527db8" loc="41:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40533010" loc="41:ECDSA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
          <variable name="r" ref="0x40533210" loc="41:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="s" ref="0x40533410" loc="41:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="d" ref="0x40533610" loc="41:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x405279f0" loc="38:ECDSA.nc">
        <interfacedef-ref qname="ECDSA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pKey" ref="0x40527898" loc="38:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verify" ref="0x40532568" loc="44:ECDSA.nc">
        <interfacedef-ref qname="ECDSA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40533ba8" loc="44:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40533d88" loc="44:ECDSA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
          <variable name="r" ref="0x40532010" loc="44:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="s" ref="0x40532210" loc="44:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="Q" ref="0x405323f0" loc="44:ECDSA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:42" alignment="I:1"><struct-ref name="Point" ref="0x403f9bc8"/>
                <typename><typedef-ref name="Point" ref="0x403f8618"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CurveParam" loc="35:CurveParam.nc">
      <documentation loc="26:CurveParam.nc">
        <short>&#10; Interface for curve params&#10;&#10; Author: An Liu&#10; Date: 09/15/2005&#10;</short>
      </documentation>
      <function command="" provided="0" name="get_param" ref="0x405dd898" loc="37:CurveParam.nc">
        <interfacedef-ref qname="CurveParam"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:150" alignment="I:1"><struct-ref name="Params" ref="0x403f70b0"/>
                <typename><typedef-ref name="Params" ref="0x403f6248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="para" ref="0x405dd740" loc="37:CurveParam.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:150" alignment="I:1"><struct-ref name="Params" ref="0x403f70b0"/>
                <typename><typedef-ref name="Params" ref="0x403f6248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="omega_mul" ref="0x405d9470" loc="39:CurveParam.nc">
        <interfacedef-ref qname="CurveParam"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x405ddcc8" loc="39:CurveParam.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="b" ref="0x405ddec8" loc="39:CurveParam.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="omega" ref="0x405d9100" loc="39:CurveParam.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="NN_DIGIT" ref="0x403f5a70"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="digits" ref="0x405d9300" loc="39:CurveParam.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="NN_UINT" ref="0x403f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SHA1" loc="35:SHA1.nc">
      <documentation loc="26:SHA1.nc">
        <short>&#10; Interface for SHA-1&#10; &#10; Author: An Liu&#10; Date: 09/15/2005&#10;</short>
      </documentation>
      <function command="" provided="0" name="reset" ref="0x409b04d8" loc="37:SHA1.nc">
        <interfacedef-ref qname="SHA1"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:98" alignment="I:1"><struct-ref name="SHA1Context" ref="0x403fa280"/>
                <typename><typedef-ref name="SHA1Context" ref="0x40402308"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="context" ref="0x409b0380" loc="37:SHA1.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:98" alignment="I:1"><struct-ref name="SHA1Context" ref="0x403fa280"/>
                <typename><typedef-ref name="SHA1Context" ref="0x40402308"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="update" ref="0x409b0ef0" loc="38:SHA1.nc">
        <interfacedef-ref qname="SHA1"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:98" alignment="I:1"><struct-ref name="SHA1Context" ref="0x403fa280"/>
                <typename><typedef-ref name="SHA1Context" ref="0x40402308"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="context" ref="0x409b08f0" loc="38:SHA1.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:98" alignment="I:1"><struct-ref name="SHA1Context" ref="0x403fa280"/>
                <typename><typedef-ref name="SHA1Context" ref="0x40402308"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="message_array" ref="0x409b0b78" loc="38:SHA1.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x409b0d88" loc="38:SHA1.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40211848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="digest" ref="0x409af770" loc="39:SHA1.nc">
        <interfacedef-ref qname="SHA1"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:98" alignment="I:1"><struct-ref name="SHA1Context" ref="0x403fa280"/>
                <typename><typedef-ref name="SHA1Context" ref="0x40402308"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="context" ref="0x409af328" loc="39:SHA1.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:98" alignment="I:1"><struct-ref name="SHA1Context" ref="0x403fa280"/>
                <typename><typedef-ref name="SHA1Context" ref="0x40402308"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="Message_Digest" ref="0x409af610" loc="39:SHA1.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40a47ba0" loc="57:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40a47ba0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40a47d08" loc="57:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a47d08"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40a43210" loc="64:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
        <documentation loc="59:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a47d08"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x40a43c38" loc="76:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
        <documentation loc="73:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x40a43738" loc="71:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
        <documentation loc="66:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40a42070" loc="82:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
        <documentation loc="78:/home/user/tinyos-main/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40a2bd38" loc="56:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40a2bd38"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40a2bea0" loc="56:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40a481a8" loc="109:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40a4ae58" loc="78:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x40a49b38" loc="103:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40a497e8" loc="103:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
          </variable>
          <variable name="dt" ref="0x40a499d8" loc="103:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40a492e0" loc="88:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x40a48638" loc="116:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40a4a518" loc="66:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40a4a3c0" loc="66:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a2bea0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40a4a9f8" loc="73:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/home/user/tinyos-main/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x40a6d368" loc="45:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403aab80"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x403aada8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x40a6c930" loc="53:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b4c80"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x403b4ea8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x40a6de40" loc="49:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403ae560"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403ae788"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x40a6c480" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403ae560"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403ae788"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x40a6c328" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403ae560"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403ae788"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x40a6b010" loc="54:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b4c80"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x403b4ea8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x40a6cde0" loc="54:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b4c80"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x403b4ea8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x40a6d988" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403aab80"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x403aada8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40a6d830" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403aab80"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x403aada8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x40a634a8" loc="38:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x40a63978" loc="44:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x40a63090" loc="32:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x40a63e38" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x40a6e5a8" loc="21:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b0d10"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x403af010"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x40a6eb98" loc="27:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b0d10"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x403af010"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x40a6ea40" loc="27:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b0d10"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x403af010"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x40a6bde8" loc="41:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a6bde8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x40a69d20" loc="74:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40a6acc8" loc="58:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40a6a300" loc="48:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a6bde8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40a690f8" loc="62:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40a671a8" loc="80:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40a6a888" loc="54:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a6bde8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40a6a730" loc="54:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40a6bde8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40a69500" loc="65:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40a698f8" loc="68:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x40a533e8" loc="55:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40a533e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x40a50ba0" loc="98:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40a50310" loc="87:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40a538d8" loc="61:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40a533e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x40a4f168" loc="104:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x40a4f010" loc="104:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x40a4f5f8" loc="110:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40a526c8" loc="75:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40a522a8" loc="70:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40a50778" loc="93:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40a53e50" loc="67:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40a533e8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40a53cf8" loc="67:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40a533e8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40a52ad0" loc="78:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40a52ec8" loc="81:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:/home/user/tinyos-main/tos/interfaces/Packet.nc">
      <documentation loc="42:/home/user/tinyos-main/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x40b2cdd0" loc="65:/home/user/tinyos-main/tos/interfaces/Packet.nc">
        <documentation loc="58:/home/user/tinyos-main/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b2cc78" loc="65:/home/user/tinyos-main/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x40b277f8" loc="78:/home/user/tinyos-main/tos/interfaces/Packet.nc">
        <documentation loc="67:/home/user/tinyos-main/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b276a0" loc="78:/home/user/tinyos-main/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40b25828" loc="126:/home/user/tinyos-main/tos/interfaces/Packet.nc">
        <documentation loc="109:/home/user/tinyos-main/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b254c8" loc="126:/home/user/tinyos-main/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b256a8" loc="126:/home/user/tinyos-main/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x40b28e20" loc="106:/home/user/tinyos-main/tos/interfaces/Packet.nc">
        <documentation loc="96:/home/user/tinyos-main/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x40b28488" loc="94:/home/user/tinyos-main/tos/interfaces/Packet.nc">
        <documentation loc="80:/home/user/tinyos-main/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b28148" loc="94:/home/user/tinyos-main/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b28328" loc="94:/home/user/tinyos-main/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/home/user/tinyos-main/tos/interfaces/Receive.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x40b2a198" loc="78:/home/user/tinyos-main/tos/interfaces/Receive.nc">
        <documentation loc="58:/home/user/tinyos-main/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
              <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b2ec00" loc="78:/home/user/tinyos-main/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x40b2ede0" loc="78:/home/user/tinyos-main/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b2a010" loc="78:/home/user/tinyos-main/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x40b3d710" loc="59:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b3d5b8" loc="59:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x40b3c220" loc="71:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b3c0c8" loc="71:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x40b3cca8" loc="85:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b3cb50" loc="85:/home/user/tinyos-main/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
      <documentation loc="42:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x40b429e8" loc="177:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="164:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x40576bb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b42890" loc="177:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x40b472b0" loc="88:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="80:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b47158" loc="88:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x40b241c8" loc="68:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="63:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x40b24860" loc="78:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="70:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b24708" loc="78:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x40b46bd8" loc="121:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="105:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b46870" loc="121:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x40b46a78" loc="121:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x40b47e98" loc="103:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="90:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b47b30" loc="103:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x40b47d38" loc="103:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40576e18"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x40b43310" loc="147:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40576960"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b431b8" loc="147:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x40b43e48" loc="162:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="149:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40576960"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b43b18" loc="162:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x40b43ce8" loc="162:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40576960"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x40b447c0" loc="136:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="123:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b44668" loc="136:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x40b41688" loc="187:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="179:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x40576bb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40b41328" loc="187:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x40b41528" loc="187:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x40576bb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x40b41f00" loc="195:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
        <documentation loc="189:/home/user/tinyos-main/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x40576bb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:/home/user/tinyos-main/tos/interfaces/Send.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40b59010" loc="75:/home/user/tinyos-main/tos/interfaces/Send.nc">
        <documentation loc="57:/home/user/tinyos-main/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b5cc50" loc="75:/home/user/tinyos-main/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b5ce30" loc="75:/home/user/tinyos-main/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40b58b78" loc="125:/home/user/tinyos-main/tos/interfaces/Send.nc">
        <documentation loc="115:/home/user/tinyos-main/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b58818" loc="125:/home/user/tinyos-main/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b589f8" loc="125:/home/user/tinyos-main/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x40b582b8" loc="112:/home/user/tinyos-main/tos/interfaces/Send.nc">
        <documentation loc="102:/home/user/tinyos-main/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40b59c50" loc="89:/home/user/tinyos-main/tos/interfaces/Send.nc">
        <documentation loc="77:/home/user/tinyos-main/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b59af8" loc="89:/home/user/tinyos-main/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40b57900" loc="100:/home/user/tinyos-main/tos/interfaces/Send.nc">
        <documentation loc="91:/home/user/tinyos-main/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b575a8" loc="100:/home/user/tinyos-main/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x40b577a0" loc="100:/home/user/tinyos-main/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x40b93d28" loc="31:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b93998" loc="31:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x40b93bc8" loc="31:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x40b70a88" loc="15:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x40b93388" loc="23:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b93010" loc="23:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:126" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4057b060"/>
                <typename><typedef-ref name="message_t" ref="0x4057bdf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x40b93228" loc="23:/home/user/tinyos-main/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:/home/user/tinyos-main/tos/interfaces/StdControl.nc">
      <documentation loc="72:/home/user/tinyos-main/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x40b9c678" loc="95:/home/user/tinyos-main/tos/interfaces/StdControl.nc">
        <documentation loc="88:/home/user/tinyos-main/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40b9cb40" loc="105:/home/user/tinyos-main/tos/interfaces/StdControl.nc">
        <documentation loc="97:/home/user/tinyos-main/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:/home/user/tinyos-main/tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x40ba6d18" loc="54:/home/user/tinyos-main/tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:/home/user/tinyos-main/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x40ba68e0" loc="49:/home/user/tinyos-main/tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:/home/user/tinyos-main/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x40ba14d8" loc="56:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x40ba0158" loc="72:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x40b9e278" loc="94:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40b9e120" loc="94:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x40ba0680" loc="79:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x40ba1c08" loc="65:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40ba1ab0" loc="65:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x40b9e780" loc="100:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x40ba0be0" loc="85:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:/home/user/tinyos-main/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x40ba5540" loc="71:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x40ba5b08" loc="81:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x40ba8ea8" loc="62:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x40ba8d50" loc="62:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x40ba4280" loc="91:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40ba4128" loc="91:/home/user/tinyos-main/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x40ba3500" loc="62:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x40ba3ce8" loc="69:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40ba3b90" loc="69:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x40ba23a0" loc="80:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40ba2248" loc="80:/home/user/tinyos-main/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
      <documentation loc="32:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40c398c8" loc="48:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <documentation loc="39:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40c39578" loc="48:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40c39768" loc="48:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x40c5ec60" loc="79:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <documentation loc="74:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40c5eb08" loc="79:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40c5d480" loc="90:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <documentation loc="81:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40c5d130" loc="90:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40c5d320" loc="90:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x40c5e0c8" loc="65:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <documentation loc="59:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x40c5c370" loc="99:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <documentation loc="92:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40c5dda8" loc="99:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40c5c010" loc="99:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40c5c208" loc="99:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x40c5e650" loc="72:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <documentation loc="67:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40c60750" loc="57:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
        <documentation loc="50:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40c60200" loc="57:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40c603f0" loc="57:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402111e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40c605e8" loc="57:/home/user/tinyos-main/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
      <documentation loc="32:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40c765d8" loc="46:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
        <documentation loc="39:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40c76480" loc="46:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40c76e70" loc="56:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
        <documentation loc="48:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40c76b08" loc="56:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x40c76d10" loc="56:/home/user/tinyos-main/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x40c67558" loc="44:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x40c68d00" loc="42:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x40c65b50" loc="49:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40c659f8" loc="49:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x40c65250" loc="47:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x40c68488" loc="40:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x40c688c8" loc="41:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x40c67158" loc="43:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40355628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x40c67958" loc="45:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x40c67e60" loc="46:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40c67d08" loc="46:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x40c65620" loc="48:/home/user/tinyos-main/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40210b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="42:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x40ce7620" loc="58:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="57:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403c28e0"/>
            <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x403c2b08"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlCapture" ref="0x40ce8058" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403bcc30"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x403bce58"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40ceaec8" loc="50:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403bcc30"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x403bce58"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x40ce8b38" loc="54:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="53:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403c3398"/>
            <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x403c35c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlCompare" ref="0x40ced8c0" loc="45:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="44:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control registers: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b8aa8"/>
            <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x403b8cd0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x40ce7168" loc="55:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403c3398"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x403c35c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x40ce7010" loc="55:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403c3398"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x403c35c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x40ce7c30" loc="59:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403c28e0"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x403c2b08"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x40ce7ad8" loc="59:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403c28e0"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x403c2b08"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlClock" ref="0x40cea390" loc="47:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403ba2c0"/>
            <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403ba4e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlCapture" ref="0x40cedde0" loc="46:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403bcc30"/>
            <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x403bce58"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlCompare" ref="0x40cea9d8" loc="49:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b8aa8"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x403b8cd0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40cea880" loc="49:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b8aa8"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x403b8cd0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlClock" ref="0x40ce8678" loc="51:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403ba2c0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403ba4e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40ce8520" loc="51:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403ba2c0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403ba4e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x40cecde0" loc="40:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40cecde0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x40d0e8f0" loc="88:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x40d0e798" loc="88:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40d10ec8" loc="76:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40ce52f0" loc="47:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40cecde0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x40ce5e40" loc="60:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40cecde0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40ce5ce8" loc="60:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40cecde0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40d102a8" loc="64:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40d0e368" loc="82:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034a6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40ce5868" loc="53:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40cecde0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40ce5710" loc="53:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40cecde0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40d106b0" loc="67:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40d10aa8" loc="70:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:/home/user/tinyos-main/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
